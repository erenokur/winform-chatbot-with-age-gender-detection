<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emgu.TF.World</name>
    </assembly>
    <members>
        <member name="T:Emgu.TF.Util.DisposableObject">
            <summary>
            An abstract class that wrap around a disposable object
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.DisposableObject._disposed">
            <summary> Track whether Dispose has been called. </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.Dispose">
            <summary>
            The dispose function that implements IDisposable interface
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.Dispose(System.Boolean)">
            <summary> 
             Dispose(bool disposing) executes in two distinct scenarios.
             If disposing equals true, the method has been called directly
             or indirectly by a user's code. Managed and unmanaged resources
             can be disposed.
             If disposing equals false, the method has been called by the
             runtime from inside the finalizer and you should not reference
             other objects. Only unmanaged resources can be disposed.
            </summary>
             <param name="disposing">
             If disposing equals false, the method has been called by the
             runtime from inside the finalizer and you should not reference
             other objects. Only unmanaged resources can be disposed.
             </param>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.ReleaseManagedResources">
            <summary>
            Release the managed resources. This function will be called during the disposal of the current object.
            override ride this function if you need to call the Dispose() function on any managed IDisposable object created by the current object
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.DisposeObject">
            <summary>
            Release the unmanaged resources
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.EventArgs`1">
            <summary>
            A generic EventArgs
            </summary>
            <typeparam name="T">The type of arguments</typeparam>
        </member>
        <member name="M:Emgu.TF.Util.EventArgs`1.#ctor(`0)">
            <summary>
            Create a generic EventArgs with the specific value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="P:Emgu.TF.Util.EventArgs`1.Value">
            <summary>
            The value of the EventArgs
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.EventArgs`2">
            <summary>
            A generic EventArgs
            </summary>
            <typeparam name="T1">The type of the first value</typeparam>
            <typeparam name="T2">The type of the second value</typeparam>
        </member>
        <member name="M:Emgu.TF.Util.EventArgs`2.#ctor(`0,`1)">
            <summary>
            Create a generic EventArgs with two values
            </summary>
            <param name="value1">The first value</param>
            <param name="value2">The second value</param>
        </member>
        <member name="P:Emgu.TF.Util.EventArgs`2.Value1">
            <summary>
            The first value
            </summary>
        </member>
        <member name="P:Emgu.TF.Util.EventArgs`2.Value2">
            <summary>
            The second value
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.ICodeGenerable">
            <summary>
            Implement this interface if the object can output code to generate it self.
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.ICodeGenerable.ToCode(Emgu.TF.Util.TypeEnum.ProgrammingLanguage)">
            <summary>
            Return the code to generate the object itself from the specific language
            </summary>
            <param name="language">The programming language to output code</param>
            <returns>The code to generate the object from the specific language</returns>
        </member>
        <member name="T:Emgu.TF.Util.IInterpolatable`1">
            <summary>
            An object that can be interpolated
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.IInterpolatable`1.LinearInterpolate(`0,System.Double)">
            <summary>
            Interpolate base on this point and the other point with the given index
            </summary>
            <param name="other">The other point</param>
            <param name="index">The interpolation index</param>
            <returns>The interpolated point</returns>
        </member>
        <member name="P:Emgu.TF.Util.IInterpolatable`1.InterpolationIndex">
            <summary>
            The index that will be used for interpolation
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.PinnedArray`1">
            <summary>
            A Pinnned array of the specific type
            </summary>
            <typeparam name="T">The type of the array</typeparam>
        </member>
        <member name="M:Emgu.TF.Util.PinnedArray`1.#ctor(System.Int32)">
            <summary>
            Create a Pinnned array of the specific type
            </summary>
            <param name="size">The size of the array</param>
        </member>
        <member name="M:Emgu.TF.Util.PinnedArray`1.AddrOfPinnedObject">
            <summary>
            Get the address of the pinned array
            </summary>
            <returns>A pointer to the address of the the pinned array</returns>
        </member>
        <member name="M:Emgu.TF.Util.PinnedArray`1.ReleaseManagedResources">
            <summary>
            Release the GCHandle
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.PinnedArray`1.DisposeObject">
            <summary>
            Disposed the unmanaged data
            </summary>
        </member>
        <member name="P:Emgu.TF.Util.PinnedArray`1.Array">
            <summary>
            Get the array
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.Platform">
            <summary>
            Provide information for the platform which is using. 
            </summary>
        </member>
        <member name="P:Emgu.TF.Util.Platform.OperationSystem">
            <summary>
            Get the type of the current operating system
            </summary>
        </member>
        <member name="P:Emgu.TF.Util.Platform.ClrType">
            <summary>
            Get the type of the current runtime environment
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.Toolbox">
            <summary>
            utilities functions for Emgu
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.SizeOf``1">
            <summary>
            Similar to Marshal.SizeOf function
            </summary>
            <typeparam name="T">The type</typeparam>
            <returns>The size of T in bytes</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.MergeBytes(System.Byte[],System.Byte[])">
            <summary>
            Merges two byte vector into one
            </summary>
            <param name="a">the first byte vector to be merged</param>
            <param name="b">the second byte vector to be merged</param>
            <returns>The bytes that is a concatenation of a and b</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.ExecuteCmd(System.String,System.String)">
            <summary>
            Call a command from command line
            </summary>
            <param name="execFileName">The name of the executable</param>
            <param name="arguments">The arguments to the executable</param>
            <returns>The standard output</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.GetBaseType(System.Type,System.String)">
            <summary>
            Use reflection to find the base type. If such type do not exist, null is returned
            </summary>
            <param name="currentType">The type to search from</param>
            <param name="baseClassName">The name of the base class to search</param>
            <returns>The base type</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.ToBytes``1(``0[])">
            <summary>
            Convert some generic vector to vector of Bytes
            </summary>
            <typeparam name="TData">type of the input vector</typeparam>
            <param name="data">array of data</param>
            <returns>the byte vector</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.LinearInterpolate``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Perform first degree interpolation give the sorted data <paramref name="src"/> and the interpolation <paramref name="indexes"/>
            </summary>
            <param name="src">The sorted data that will be interpolated from</param>
            <param name="indexes">The indexes of the interpolate result</param>
            <returns></returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.LinearSubsample``1(System.Collections.Generic.IEnumerable{``0},System.Double)">
            <summary>
            Get subsamples with the specific rate
            </summary>
            <param name="src">The source which the subsamples will be derived from</param>
            <param name="subsampleRate">The subsample rate</param>
            <returns><paramref name="src"/> subsampled with the specific rate </returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.JoinInterpolatables``1(System.Collections.Generic.IEnumerable{``0}[])">
            <summary>
            Joining multiple index ascending IInterpolatables together as a single index ascending IInterpolatable. 
            </summary>
            <typeparam name="T">The type of objects that will be joined</typeparam>
            <param name="enums">The enumerables, each should be stored in index ascending order</param>
            <returns>A single enumerable sorted in index ascending order</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.LoadLibrary(System.String)">
            <summary>
            Maps the specified executable module into the address space of the calling process.
            </summary>
            <param name="dllname">The name of the dll</param>
            <returns>The handle to the library</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.FreeLibrary(System.IntPtr)">
            <summary>
            Decrements the reference count of the loaded dynamic-link library (DLL). When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid
            </summary>
            <param name="handle">The handle to the library</param>
            <returns>If the function succeeds, the return value is true. If the function fails, the return value is false.</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.SetDllDirectory(System.String)">
            <summary>
            Adds a directory to the search path used to locate DLLs for the application
            </summary>
            <param name="path">The directory to be searched for DLLs</param>
            <returns>True if success</returns>
        </member>
        <member name="T:Emgu.TF.Util.TypeEnum.OS">
            <summary>
            Type of operating system
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.OS.Windows">
            <summary>
            Windows
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.OS.Linux">
            <summary>
            Linux
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.OS.MacOSX">
            <summary>
            Mac OSX
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.OS.IOS">
            <summary>
            iOS devices. iPhone, iPad, iPod Touch
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.OS.Android">
            <summary>
            Android devices
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.OS.WindowsPhone">
            <summary>
            The windows phone
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.TypeEnum.ClrType">
            <summary>
            The runtime environment
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.ClrType.DotNet">
            <summary>
            .Net runtime
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.ClrType.NetFxCore">
            <summary>
            Windows Store app runtime
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.ClrType.Mono">
            <summary>
            Mono runtime
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.TypeEnum.ProgrammingLanguage">
            <summary>
            The type of Programming languages
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.ProgrammingLanguage.CSharp">
            <summary>
            C#
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.TypeEnum.ProgrammingLanguage.CPlusPlus">
            <summary>
            C++
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.UnmanagedObject">
            <summary>
            An Unmanaged Object is a disposable object with a Ptr property pointing to the unmanaged object
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.UnmanagedObject._ptr">
            <summary>
            A pointer to the unmanaged object
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.UnmanagedObject.op_Implicit(Emgu.TF.Util.UnmanagedObject)~System.IntPtr">
            <summary>
            Implicit operator for IntPtr
            </summary>
            <param name="obj">The UnmanagedObject</param>
            <returns>The unmanaged pointer for this object</returns>
        </member>
        <member name="P:Emgu.TF.Util.UnmanagedObject.Ptr">
            <summary>
            Pointer to the unmanaged object
            </summary>
        </member>
        <member name="T:Emgu.TF.Buffer">
            <summary>
            Buffer holds a pointer to a block of data and its associated length.
            Typically, the data consists of a serialized protocol buffer, but other data
            may also be held in a buffer.
            </summary>
        </member>
        <member name="M:Emgu.TF.Buffer.#ctor">
            <summary>
            Create a new empty buffer
            </summary>
        </member>
        <member name="M:Emgu.TF.Buffer.FromString(System.Byte[])">
            <summary>
            Create a new Buffer from raw protobuf data
            </summary>
            <param name="rawProtoBuf">The raw protobuf data</param>
            <returns>A Tensorflow buffer</returns>
        </member>
        <member name="M:Emgu.TF.Buffer.GetMemoryStream">
            <summary>
            Get a copy of the data as a memory stream
            </summary>
            <returns>A copy of the data as a Memory stream</returns>
        </member>
        <member name="M:Emgu.TF.Buffer.DisposeObject">
            <summary>
            Release all the unmanaged memory associated with this Buffer
            </summary>
        </member>
        <member name="P:Emgu.TF.Buffer.DataPtr">
            <summary>
            Get the pointer to the unmanaged data
            </summary>
        </member>
        <member name="P:Emgu.TF.Buffer.Length">
            <summary>
            The length of the Data in bytes
            </summary>
        </member>
        <member name="P:Emgu.TF.Buffer.Data">
            <summary>
            Get the raw data as an array of byte.
            </summary>
        </member>
        <member name="T:Emgu.TF.TfInvoke">
            <summary>
            Entry points to the native Tensorflow library.
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.TFCallingConvention">
            <summary>
            The Tensorflow native api calling convention
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.StringMarshalType">
            <summary>
            The string marshal type
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.BoolMarshalType">
            <summary>
            Represent a bool value in C++
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.BoolToIntMarshalType">
            <summary>
            Represent a int value in C++
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.ExternLibrary">
            <summary>
            The file name of the tfextern library
            </summary>
        </member>
        <member name="M:Emgu.TF.TfInvoke.CheckLibraryLoaded">
            <summary>
            Check to make sure all the unmanaged libraries are loaded
            </summary>
            <returns>True if library loaded</returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.LoadUnmanagedModules(System.String,System.String[])">
            <summary>
            Attempts to load tensorflow modules from the specific location
            </summary>
            <param name="loadDirectory">The directory where the unmanaged modules will be loaded. If it is null, the default location will be used.</param>
            <param name="unmanagedModules">The names of tensorflow modules. </param>
            <returns>True if all the modules has been loaded successfully</returns>
            <remarks>If <paramref name="loadDirectory"/> is null, the default location on windows is the dll's path appended by either "x64" or "x86", depends on the applications current mode.</remarks>
        </member>
        <member name="M:Emgu.TF.TfInvoke.GetModuleFormatString">
            <summary>
            Get the module format string.
            </summary>
            <returns>On Windows, "{0}".dll will be returned; On Linux, "lib{0}.so" will be returned; Otherwise {0} is returned.</returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.DefaultLoadUnmanagedModules(System.String[])">
            <summary>
            Attempts to load tensorflow modules from the specific location
            </summary>
            <param name="modules">The names of tensorflow modules.</param>
            <returns>True if all the modules has been loaded successfully</returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.#cctor">
            <summary>
            Static Constructor to setup tensorflow environment
            </summary>
        </member>
        <member name="M:Emgu.TF.TfInvoke.DataTypeSize(Emgu.TF.DataType)">
            <summary>
            Get the size of the datatype in bytes.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.GetAllOpList">
            <summary>
            Get the proto buffer that contains the list of all the supported operations.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.GetNativeType(Emgu.TF.DataType)">
            <summary>
            Get the equivalent native type from Tensorflow DataType
            </summary>
            <param name="dataType">The tensorflow DataType</param>
            <returns>The equivalent native type</returns>
        </member>
        <member name="F:Emgu.TF.TfInvoke.TensorflowModuleList">
            <summary>
            The List of the tensorflow modules
            </summary>
        </member>
        <member name="P:Emgu.TF.TfInvoke.Version">
            <summary>
            Get the tensor flow version
            </summary>
        </member>
        <member name="P:Emgu.TF.TfInvoke.IsGoogleCudaEnabled">
            <summary>
            Returns true if GOOGLE_CUDA is defined.
            </summary>
        </member>
        <member name="T:Emgu.TF.Function">
            <summary>
            A tensorflow function
            </summary>
        </member>
        <member name="M:Emgu.TF.Function.#ctor(System.Byte[],Emgu.TF.Status)">
            <summary>
            Construct and return the function whose FunctionDef representation is
            serialized in <paramref name="proto"/>
            </summary>
            <param name="proto">Serialized FunctionDef</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Function.DisposeObject">
            <summary>
            Release all the unmanaged memory associated with this Buffer
            </summary>
        </member>
        <member name="M:Emgu.TF.Function.ToFunctionDef(Emgu.TF.Buffer,Emgu.TF.Status)">
            <summary>
            Write out a serialized representation of this Function (as a FunctionDef protocol
            message) 
            </summary>
            <param name="outputFuncDef">a serialized representation of this Function (as a FunctionDef protocol message) </param>
            <param name="status">The status</param>
        </member>
        <member name="T:Emgu.TF.Graph">
            <summary>
            Tensorflow Graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Graph.#ctor">
            <summary>
            Create a new Graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Graph.SetTensorShape(Emgu.TF.Output,System.Int32[],Emgu.TF.Status)">
            <summary>
            Sets the shape of the Tensor referenced by <paramref name="output"/> in graph to
            the shape described by <paramref name="dims"/>.
            </summary>
            <param name="output">The output</param>
            <param name="dims">The shape</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.GetTensorShape(Emgu.TF.Output,Emgu.TF.Status)">
            <summary>
            Returns the shape of the Tensor
            </summary>
            <param name="output">The output</param>
            <param name="status">The status</param>
            <returns>The shape of the Tensor</returns>
        </member>
        <member name="M:Emgu.TF.Graph.DisposeObject">
            <summary>
            Release all the unmanaged memory associated with the graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Graph.ImportGraphDef(Emgu.TF.Buffer,Emgu.TF.ImportGraphDefOptions,Emgu.TF.Status)">
            <summary>
            Import the graph serialized in <paramref name="graphDef"/> into the current graph.
            Convenience function for when no return outputs have been added.
            </summary>
            <param name="graphDef">The GraphDef to be imported</param>
            <param name="options">The import options</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.NewOperation(System.String,System.String)">
            <summary>
            Operation will only be added to graph when FinishOperation() is
            called (assuming FinishOperation() does not return an error).
            Graph must not be deleted until after FinishOperation() is
            called.
            </summary>
            <param name="opType">The operation type</param>
            <param name="opName">The name of the operation</param>
            <returns>A new operation description</returns>
        </member>
        <member name="M:Emgu.TF.Graph.OperationByName(System.String)">
            <summary>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </summary>
            <param name="opName">The name of the operation</param>
            <returns>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </returns>
        </member>
        <member name="M:Emgu.TF.Graph.NextOperation(System.IntPtr@)">
            <summary>
            Iterate through the operations of a graph.
            </summary>
            <param name="pos">The position pointer that can be used to iterate though the operations of this graph. Use IntPtr.Zero to get the first operation</param>
            <returns>The next operation from the position</returns>
        </member>
        <member name="M:Emgu.TF.Graph.ToGraphDef(Emgu.TF.Buffer,Emgu.TF.Status)">
            <summary>
            Write out a serialized representation of `graph` (as a GraphDef protocol
            message).
            </summary>
            <param name="outputGraphDef">The buffer to store the GraphDef</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.Versions(Emgu.TF.Status)">
            <summary>
            Returns the serialized VersionDef proto for this graph.
            </summary>
            <return>The serialized VersionDef proto for this graph.</return>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.GetEnumerator">
            <summary>
            Get an enumerator of the Operations in this Graph
            </summary>
            <returns>An enumerator of the Operations in this Graph</returns>
        </member>
        <member name="M:Emgu.TF.Graph.VarHandleOp(Emgu.TF.DataType,System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtype"></param>
            <param name="shape"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ThreadUnsafeUnigramCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true"></param>
            <param name="num_sampled"></param>
            <param name="unique"></param>
            <param name="range_max"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTable(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="key_dtype"></param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceFlush(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="num_buckets">Input to the operation. </param>
            <param name="generate_quantiles"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LRN(Emgu.TF.Output,System.Int64,System.Single,System.Single,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="depth_radius"></param>
            <param name="bias"></param>
            <param name="alpha"></param>
            <param name="beta"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCreateQuantileStreamResource(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="num_streams">Input to the operation. </param>
            <param name="max_elements"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.RandomUniformInt(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="minval">Input to the operation. </param>
            <param name="maxval">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConsumeMutexLock(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="mutex_lock">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsBoostedTreesQuantileStreamResourceInitialized(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapUnstage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseToDense(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="output_shape">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="validate_indices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] dense(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeWav(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="audio">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SigmoidGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesSerializeEnsemble(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] stamp_token(type: DtInt64).
            [1] tree_ensemble_serialized(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ClipByValue(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="clip_value_min">Input to the operation. </param>
            <param name="clip_value_max">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesExampleDebugOutputs(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="bucketized_features">Input to the operation. </param>
            <param name="logits_dimension"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] examples_debug_outputs_serialized(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeWav(Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="desired_channels"></param>
            <param name="desired_samples"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] audio(type: DtFloat).
            [1] sample_rate(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCenterBias(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="mean_gradients">Input to the operation. </param>
            <param name="mean_hessians">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] continue_centering(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnbatchGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="original_input">Input to the operation. </param>
            <param name="batch_index">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="id">Input to the operation. </param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] batched_grad(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelDynamicStitch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] merged(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.VariableShape(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GenerateVocabRemapping(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="new_vocab_file">Input to the operation. </param>
            <param name="old_vocab_file">Input to the operation. </param>
            <param name="new_vocab_offset"></param>
            <param name="num_new_vocab"></param>
            <param name="old_vocab_size"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] remapping(type: DtInt64).
            [1] num_present(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalMaterializedIndexDatasetHandle(System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceSumSparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ControlTrigger(System.String)">
            <summary>
            
            </summary>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InTopK(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="predictions">Input to the operation. </param>
            <param name="targets">Input to the operation. </param>
            <param name="k"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] precision(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Unbatch(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="batched_tensor">Input to the operation. </param>
            <param name="batch_index">Input to the operation. </param>
            <param name="id">Input to the operation. </param>
            <param name="timeout_micros"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] unbatched_tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseTensorSliceDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dense_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIdentityIndexedDataset(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AudioSpectrogram(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="window_size"></param>
            <param name="stride"></param>
            <param name="magnitude_squared"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] spectrogram(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SlideDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="window_size">Input to the operation. </param>
            <param name="window_shift">Input to the operation. </param>
            <param name="window_stride">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedLengthRecordDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="header_bytes">Input to the operation. </param>
            <param name="record_bytes">Input to the operation. </param>
            <param name="footer_bytes">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNParamsSize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="num_layers">Input to the operation. </param>
            <param name="num_units">Input to the operation. </param>
            <param name="input_size">Input to the operation. </param>
            <param name="T"></param>
            <param name="S"></param>
            <param name="rnn_mode"></param>
            <param name="input_mode"></param>
            <param name="direction"></param>
            <param name="dropout"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] params_size(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalAvgPoolGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input_tensor_shape">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="row_pooling_sequence">Input to the operation. </param>
            <param name="col_pooling_sequence">Input to the operation. </param>
            <param name="overlapping"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Mfcc(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="spectrogram">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="upper_frequency_limit"></param>
            <param name="lower_frequency_limit"></param>
            <param name="filterbank_channel_count"></param>
            <param name="dct_coefficient_count"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SdcaShrinkL1(Emgu.TF.Output,System.Single,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="weights">Input to the operation. </param>
            <param name="l1"></param>
            <param name="l2"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.RsqrtGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Batch(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="in_tensors">Input to the operation. </param>
            <param name="num_batch_threads"></param>
            <param name="max_batch_size"></param>
            <param name="batch_timeout_micros"></param>
            <param name="grad_timeout_micros"></param>
            <param name="max_enqueued_batches"></param>
            <param name="allowed_batch_sizes"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="batching_queue"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] batched_tensors(type: DtInvalid).
            [1] batch_index(type: DtInt64).
            [2] id(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Imag(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Round(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQueue(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackV2(Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="max_size">Input to the operation. </param>
            <param name="elem_type"></param>
            <param name="stack_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCalculateBestGainsPerFeature(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="node_id_range">Input to the operation. </param>
            <param name="stats_summary_list">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="tree_complexity">Input to the operation. </param>
            <param name="min_node_weight">Input to the operation. </param>
            <param name="max_splits"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] node_ids_list(type: DtInt32).
            [1] gains_list(type: DtFloat).
            [2] thresholds_list(type: DtInt32).
            [3] left_node_contribs_list(type: DtFloat).
            [4] right_node_contribs_list(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BiasAddGrad(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="out_backprop">Input to the operation. </param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFunction(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,Emgu.TF.DataType[],System.Int64,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="in_tensors">Input to the operation. </param>
            <param name="captured_tensors">Input to the operation. </param>
            <param name="num_batch_threads"></param>
            <param name="max_batch_size"></param>
            <param name="batch_timeout_micros"></param>
            <param name="Tout"></param>
            <param name="max_enqueued_batches"></param>
            <param name="allowed_batch_sizes"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="batching_queue"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out_tensors(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeIterator(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IFFT3D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddedBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="padded_shapes">Input to the operation. </param>
            <param name="padding_values">Input to the operation. </param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Add(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesEnsembleResourceHandleOp(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SquaredDifference(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RestoreV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="prefix">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="shape_and_slices">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensors(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="use_nesterov"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.IsBoostedTreesEnsembleInitialized(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNBackpropV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="output">Input to the operation. </param>
            <param name="output_h">Input to the operation. </param>
            <param name="output_c">Input to the operation. </param>
            <param name="output_backprop">Input to the operation. </param>
            <param name="output_h_backprop">Input to the operation. </param>
            <param name="output_c_backprop">Input to the operation. </param>
            <param name="reserve_space">Input to the operation. </param>
            <param name="host_reserved">Input to the operation. </param>
            <param name="rnn_mode"></param>
            <param name="input_mode"></param>
            <param name="direction"></param>
            <param name="dropout"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] input_backprop(type: DtInvalid).
            [1] input_h_backprop(type: DtInvalid).
            [2] input_c_backprop(type: DtInvalid).
            [3] params_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCreateEnsemble(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="stamp_token">Input to the operation. </param>
            <param name="tree_ensemble_serialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesDeserializeEnsemble(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="stamp_token">Input to the operation. </param>
            <param name="tree_ensemble_serialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BiasAddV1(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomGamma(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesGetEnsembleStates(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] stamp_token(type: DtInt64).
            [1] num_trees(type: DtInt32).
            [2] num_finalized_trees(type: DtInt32).
            [3] num_attempted_layers(type: DtInt32).
            [4] last_layer_nodes_range(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WholeFileReader(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NegTrain(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="w_in">Input to the operation. </param>
            <param name="w_out">Input to the operation. </param>
            <param name="examples">Input to the operation. </param>
            <param name="labels">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="vocab_count"></param>
            <param name="num_negative_samples"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesMakeStatsSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="node_ids">Input to the operation. </param>
            <param name="gradients">Input to the operation. </param>
            <param name="hessians">Input to the operation. </param>
            <param name="bucketized_features_list">Input to the operation. </param>
            <param name="max_splits"></param>
            <param name="num_buckets"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] stats_summary(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesPredict(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="bucketized_features">Input to the operation. </param>
            <param name="logits_dimension"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] logits(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Real(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeJpeg(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Single,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="channels"></param>
            <param name="ratio"></param>
            <param name="fancy_upscaling"></param>
            <param name="try_recover_truncated"></param>
            <param name="acceptable_fraction"></param>
            <param name="dct_method"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthwiseConv2dNativeBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input_sizes">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesTrainingPredict(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="cached_tree_ids">Input to the operation. </param>
            <param name="cached_node_ids">Input to the operation. </param>
            <param name="bucketized_features">Input to the operation. </param>
            <param name="logits_dimension"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] partial_logits(type: DtFloat).
            [1] tree_ids(type: DtInt32).
            [2] node_ids(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TryRpc(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="address">Input to the operation. </param>
            <param name="method">Input to the operation. </param>
            <param name="request">Input to the operation. </param>
            <param name="protocol"></param>
            <param name="fail_fast"></param>
            <param name="timeout_in_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] response(type: DtString).
            [1] status_code(type: DtInt32).
            [2] status_message(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sign(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CTCLoss(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="labels_indices">Input to the operation. </param>
            <param name="labels_values">Input to the operation. </param>
            <param name="sequence_length">Input to the operation. </param>
            <param name="preprocess_collapse_repeated"></param>
            <param name="ctc_merge_repeated"></param>
            <param name="ignore_longer_outputs_than_inputs"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] loss(type: DtFloat).
            [1] gradient(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RFFT3D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniformCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true"></param>
            <param name="num_sampled"></param>
            <param name="unique"></param>
            <param name="range_max"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesUpdateEnsemble(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="feature_ids">Input to the operation. </param>
            <param name="node_ids">Input to the operation. </param>
            <param name="gains">Input to the operation. </param>
            <param name="thresholds">Input to the operation. </param>
            <param name="left_node_contribs">Input to the operation. </param>
            <param name="right_node_contribs">Input to the operation. </param>
            <param name="max_depth">Input to the operation. </param>
            <param name="learning_rate">Input to the operation. </param>
            <param name="pruning_mode"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceHandleOp(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RangeDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="stop">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EluGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="outputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackPushV2(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem">Input to the operation. </param>
            <param name="swap_memory"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesMakeQuantileSummaries(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="float_values">Input to the operation. </param>
            <param name="example_weights">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summaries(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HostConst(Emgu.TF.Tensor,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceAddSummaries(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="summaries">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Cumprod(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="exclusive"></param>
            <param name="reverse"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceGetBucketBoundaries(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="num_features"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] bucket_boundaries(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorTakeGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="num_required">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] average(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapAndBatchDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FIFOQueueV2(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="component_types"></param>
            <param name="shapes"></param>
            <param name="capacity"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringStrip(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapAndBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="num_parallel_batches">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Roll(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shift">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ListDiff(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="out_idx"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            [1] idx(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FIFOQueue(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="component_types"></param>
            <param name="shapes"></param>
            <param name="capacity"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LearnedUnigramCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true"></param>
            <param name="num_sampled"></param>
            <param name="unique"></param>
            <param name="range_max"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConcatenateDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="another_dataset">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomUniform(Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalMaxPool(Emgu.TF.Output,System.Single[],System.Boolean,System.Boolean,System.Boolean,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="pooling_ratio"></param>
            <param name="pseudo_random"></param>
            <param name="overlapping"></param>
            <param name="deterministic"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] row_pooling_sequence(type: DtInt64).
            [2] col_pooling_sequence(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesBucketize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="float_values">Input to the operation. </param>
            <param name="bucket_boundaries">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] buckets(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Pack(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="axis"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IRFFT2D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Lgamma(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CTCBeamSearchDecoder(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="sequence_length">Input to the operation. </param>
            <param name="beam_width"></param>
            <param name="top_paths"></param>
            <param name="merge_repeated"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] decoded_indices(type: DtInt64).
            [1] decoded_values(type: DtInt64).
            [2] decoded_shape(type: DtInt64).
            [3] log_probability(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogUniformCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true"></param>
            <param name="num_sampled"></param>
            <param name="unique"></param>
            <param name="range_max"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumRecordsProducedV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] records_produced(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TakeManySparseFromTensorsMap(Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sparse_handles">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedUnigramCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.String,System.Single,System.Int64,System.Int64,System.Int64,System.Single[],System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true"></param>
            <param name="num_sampled"></param>
            <param name="unique"></param>
            <param name="range_max"></param>
            <param name="vocab_file"></param>
            <param name="distortion"></param>
            <param name="num_reserved_ids"></param>
            <param name="num_shards"></param>
            <param name="shard"></param>
            <param name="unigrams"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FloorMod(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sigmoid(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CheckNumerics(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="message"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScalarSummary(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tags">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApproximateEqual(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="tolerance"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PlaceholderWithDefault(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AllCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true"></param>
            <param name="num_sampled"></param>
            <param name="unique"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Erf(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool3D(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ComputeAccidentalHits(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="sampled_candidates">Input to the operation. </param>
            <param name="num_true"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt32).
            [1] ids(type: DtInt64).
            [2] weights(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WriteAudioSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="max_outputs"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SetSize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="set_indices">Input to the operation. </param>
            <param name="set_values">Input to the operation. </param>
            <param name="set_shape">Input to the operation. </param>
            <param name="validate_indices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomShuffleQueueV2(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="component_types"></param>
            <param name="shapes"></param>
            <param name="capacity"></param>
            <param name="min_after_dequeue"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LoadAndRemapMatrix(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="ckpt_path">Input to the operation. </param>
            <param name="old_tensor_name">Input to the operation. </param>
            <param name="row_remapping">Input to the operation. </param>
            <param name="col_remapping">Input to the operation. </param>
            <param name="initializing_values">Input to the operation. </param>
            <param name="num_rows"></param>
            <param name="num_cols"></param>
            <param name="max_rows_in_memory"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_matrix(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGradWithShape(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="shape_to_prepend">Input to the operation. </param>
            <param name="source"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtResource).
            [1] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReluGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CollectiveReduce(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="group_size"></param>
            <param name="group_key"></param>
            <param name="instance_key"></param>
            <param name="merge_op"></param>
            <param name="final_op"></param>
            <param name="subdiv_offsets"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CollectiveBcastSend(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="group_size"></param>
            <param name="group_key"></param>
            <param name="instance_key"></param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchIFFT2D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueue(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.CollectiveBcastRecv(Emgu.TF.DataType,System.Int64,System.Int64,System.Int64,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="T"></param>
            <param name="group_size"></param>
            <param name="group_key"></param>
            <param name="instance_key"></param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodePng(Emgu.TF.Output,System.Int64,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="channels"></param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DataFormatDimMap(Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="src_format"></param>
            <param name="dst_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueUpTo(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types"></param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeBmp(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="channels"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CTCGreedyDecoder(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="sequence_length">Input to the operation. </param>
            <param name="merge_repeated"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] decoded_indices(type: DtInt64).
            [1] decoded_values(type: DtInt64).
            [2] decoded_shape(type: DtInt64).
            [3] log_probability(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WholeFileReaderV2(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddingFIFOQueueV2(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="component_types"></param>
            <param name="shapes"></param>
            <param name="capacity"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixExponential(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.VarIsInitializedOp(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNN(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="rnn_mode"></param>
            <param name="input_mode"></param>
            <param name="direction"></param>
            <param name="dropout"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="is_training"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_h(type: DtInvalid).
            [2] output_c(type: DtInvalid).
            [3] reserve_space(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatMul(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="adj_x"></param>
            <param name="adj_y"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="rnn_mode"></param>
            <param name="input_mode"></param>
            <param name="direction"></param>
            <param name="dropout"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="is_training"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_h(type: DtInvalid).
            [2] output_c(type: DtInvalid).
            [3] reserve_space(type: DtInvalid).
            [4] host_reserved(type: DtInt8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorFromStringHandle(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="string_handle">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] multi_device_iterator(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNBackprop(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="output">Input to the operation. </param>
            <param name="output_h">Input to the operation. </param>
            <param name="output_c">Input to the operation. </param>
            <param name="output_backprop">Input to the operation. </param>
            <param name="output_h_backprop">Input to the operation. </param>
            <param name="output_c_backprop">Input to the operation. </param>
            <param name="reserve_space">Input to the operation. </param>
            <param name="rnn_mode"></param>
            <param name="input_mode"></param>
            <param name="direction"></param>
            <param name="dropout"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] input_backprop(type: DtInvalid).
            [1] input_h_backprop(type: DtInvalid).
            [2] input_c_backprop(type: DtInvalid).
            [3] params_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Gather(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="validate_indices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNParamsToCanonical(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="num_layers">Input to the operation. </param>
            <param name="num_units">Input to the operation. </param>
            <param name="input_size">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="num_params"></param>
            <param name="rnn_mode"></param>
            <param name="input_mode"></param>
            <param name="direction"></param>
            <param name="dropout"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] weights(type: DtInvalid).
            [1] biases(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNorm(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="offset">Input to the operation. </param>
            <param name="mean">Input to the operation. </param>
            <param name="variance">Input to the operation. </param>
            <param name="epsilon"></param>
            <param name="data_format"></param>
            <param name="is_training"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] batch_mean(type: DtInvalid).
            [2] batch_variance(type: DtInvalid).
            [3] reserve_space_1(type: DtInvalid).
            [4] reserve_space_2(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SeluGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="outputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableFindV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNCanonicalToParams(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="num_layers">Input to the operation. </param>
            <param name="num_units">Input to the operation. </param>
            <param name="input_size">Input to the operation. </param>
            <param name="weights">Input to the operation. </param>
            <param name="biases">Input to the operation. </param>
            <param name="rnn_mode"></param>
            <param name="input_mode"></param>
            <param name="direction"></param>
            <param name="dropout"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] params(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DynamicPartition(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="partitions">Input to the operation. </param>
            <param name="num_partitions"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Relu6(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TextLineReader(System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="skip_header_lines"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Bucketize(Emgu.TF.Output,System.Single[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="boundaries"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DynamicStitch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] merged(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomShuffleQueue(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="component_types"></param>
            <param name="shapes"></param>
            <param name="capacity"></param>
            <param name="min_after_dequeue"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddingFIFOQueue(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="component_types"></param>
            <param name="shapes"></param>
            <param name="capacity"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PriorityQueue(System.Int64[][],Emgu.TF.DataType[],System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="shapes"></param>
            <param name="component_types"></param>
            <param name="capacity"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SpaceToBatch(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="block_size"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PriorityQueueV2(System.Int64[][],Emgu.TF.DataType[],System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="shapes"></param>
            <param name="component_types"></param>
            <param name="capacity"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InterleaveDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="cycle_length">Input to the operation. </param>
            <param name="block_length">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueueV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueueMany(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderResetV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueueManyV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeue(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="component_types"></param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="seed">Input to the operation. </param>
            <param name="seed2">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueV2(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="component_types"></param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueMany(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types"></param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorGetNextFromShard(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="multi_device_iterator">Input to the operation. </param>
            <param name="shard_num">Input to the operation. </param>
            <param name="incarnation_id">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSumWithNumSegments(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TruncateMod(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DenseToSparseBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="row_shape">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CompareAndBitpack(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BesselI0e(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdNonAliasingAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueManyV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types"></param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueUpToV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types"></param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueClose(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="cancel_pending_enqueues"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelMapDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="use_inter_op_parallelism"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListPopBack(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="element_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            [1] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueCloseV2(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="cancel_pending_enqueues"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustContrastv2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="contrast_factor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueIsClosed(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_closed(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueIsClosedV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_closed(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueSize(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueSizeV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentProd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorNumAccumulated(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] num_accumulated(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SaveSlices(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="shapes_and_slices">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SpaceToBatchND(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_shape">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorSetGlobalStep(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="new_global_step">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MergeV2Checkpoints(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="checkpoint_prefixes">Input to the operation. </param>
            <param name="destination_prefix">Input to the operation. </param>
            <param name="delete_old_dirs"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ImageSummary(Emgu.TF.Output,Emgu.TF.Output,System.Int64,Emgu.TF.Tensor,System.String)">
            <summary>
            
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="max_images"></param>
            <param name="bad_color"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.If(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="cond">Input to the operation. </param>
            <param name="input">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixSolveLs(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="l2_regularizer">Input to the operation. </param>
            <param name="fast"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConditionalAccumulator(Emgu.TF.DataType,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtype"></param>
            <param name="shape"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="reduction_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorApplyGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="local_step">Input to the operation. </param>
            <param name="gradient">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.FFT(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAddSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringFormat(Emgu.TF.Output,System.String,System.String,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="template"></param>
            <param name="placeholder"></param>
            <param name="summarize"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseConditionalAccumulator(Emgu.TF.DataType,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtype"></param>
            <param name="shape"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="reduction_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GreaterEqual(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAccumulatorApplyGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="local_step">Input to the operation. </param>
            <param name="gradient_indices">Input to the operation. </param>
            <param name="gradient_values">Input to the operation. </param>
            <param name="gradient_shape">Input to the operation. </param>
            <param name="has_known_shape"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterNdAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAccumulatorTakeGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="num_required">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] values(type: DtInvalid).
            [2] shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackPopV2(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] elem(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RepeatDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackCloseV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Stack(Emgu.TF.DataType,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="elem_type"></param>
            <param name="stack_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GroupByWindowDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="key_func_other_arguments">Input to the operation. </param>
            <param name="reduce_func_other_arguments">Input to the operation. </param>
            <param name="window_size_func_other_arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseCross(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Int64,System.Int64,Emgu.TF.DataType,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shapes">Input to the operation. </param>
            <param name="dense_inputs">Input to the operation. </param>
            <param name="hashed_output"></param>
            <param name="num_buckets"></param>
            <param name="hash_key"></param>
            <param name="out_type"></param>
            <param name="internal_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackPush(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem">Input to the operation. </param>
            <param name="swap_memory"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GatherV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelConcat(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="offset">Input to the operation. </param>
            <param name="mean">Input to the operation. </param>
            <param name="variance">Input to the operation. </param>
            <param name="epsilon"></param>
            <param name="data_format"></param>
            <param name="is_training"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] batch_mean(type: DtInvalid).
            [2] batch_variance(type: DtInvalid).
            [3] reserve_space_1(type: DtInvalid).
            [4] reserve_space_2(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackPop(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] elem(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Exit(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackClose(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayV3(Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape"></param>
            <param name="dynamic_size"></param>
            <param name="clear_after_read"></param>
            <param name="identical_element_shapes"></param>
            <param name="tensor_array_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            [1] flow(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGradV3(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="source"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtResource).
            [1] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayWriteV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayReadV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGatherV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierReadySize(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalMaxPoolGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="row_pooling_sequence">Input to the operation. </param>
            <param name="col_pooling_sequence">Input to the operation. </param>
            <param name="overlapping"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayScatterV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListScatter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReadVariableOp(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayConcatV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape_except0"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefMerge(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] value_index(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GatherNd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySplitV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="lengths">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedInstanceNorm(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="x_min">Input to the operation. </param>
            <param name="x_max">Input to the operation. </param>
            <param name="output_range_given"></param>
            <param name="given_y_min"></param>
            <param name="given_y_max"></param>
            <param name="variance_epsilon"></param>
            <param name="min_separation"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] y_min(type: DtFloat).
            [2] y_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapDefun(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentMeanWithNumSegments(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySizeV3(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RealDiv(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayCloseV3(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.PopulationCount(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArray(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.Boolean,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="dynamic_size"></param>
            <param name="clear_after_read"></param>
            <param name="tensor_array_name"></param>
            <param name="element_shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayV2(Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape"></param>
            <param name="dynamic_size"></param>
            <param name="clear_after_read"></param>
            <param name="tensor_array_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPoolGrad(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input_shape">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomPoisson(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="rate">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DenseToDenseSetOperation(Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="set1">Input to the operation. </param>
            <param name="set2">Input to the operation. </param>
            <param name="set_operation"></param>
            <param name="validate_indices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result_indices(type: DtInt64).
            [1] result_values(type: DtInvalid).
            [2] result_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTable(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BitwiseOr(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_range">Input to the operation. </param>
            <param name="max_range">Input to the operation. </param>
            <param name="mode"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGrad(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="source"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomPoissonV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="rate">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseMatMul(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="transpose_a"></param>
            <param name="transpose_b"></param>
            <param name="a_is_sparse"></param>
            <param name="b_is_sparse"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTableV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGradV2(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="source"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RecordInput(System.String,System.Int64,System.Single,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="file_pattern"></param>
            <param name="file_random_seed"></param>
            <param name="file_shuffle_shift_ratio"></param>
            <param name="file_buffer_size"></param>
            <param name="file_parallelism"></param>
            <param name="batch_size"></param>
            <param name="compression_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] records(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScanDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="initial_state">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayWrite(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdam(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="beta2_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="use_nesterov"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.DivNoNan(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchToSpace(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="crops">Input to the operation. </param>
            <param name="block_size"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayWriteV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentSum(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayRead(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Floor(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayReadV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayPack(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayUnpack(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Merge(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] value_index(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="use_inter_op_parallelism"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NthElement(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="reverse"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedLengthRecordReaderV2(System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="record_bytes"></param>
            <param name="header_bytes"></param>
            <param name="footer_bytes"></param>
            <param name="hop_bytes"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="encoding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGather(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShuffleDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="seed2">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="reshuffle_each_iteration"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGatherV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorToStringHandle(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] string_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReshape(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="new_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayScatter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayScatterV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayConcat(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape_except0"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Betainc(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SqlDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="driver_name">Input to the operation. </param>
            <param name="data_source_name">Input to the operation. </param>
            <param name="query">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatchingFiles(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="pattern">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filenames(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv2DBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Boolean,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input_sizes">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="use_cudnn_on_gpu"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayConcatV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="element_shape_except0"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapClear(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SetStatsAggregatorDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="stats_aggregator">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySplit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="lengths">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixDeterminant(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchSelfAdjointEigV2(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_v"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] e(type: DtInvalid).
            [1] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SplitV(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="size_splits">Input to the operation. </param>
            <param name="split_dim">Input to the operation. </param>
            <param name="num_split"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeNearestNeighborGrad(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EmptyTensorList(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="element_shape">Input to the operation. </param>
            <param name="element_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SqrtGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySplitV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="lengths">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorGetNextAsOptional(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] optional(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySizeV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayClose(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayCloseV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Transpose(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="perm">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Barrier(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="component_types"></param>
            <param name="shapes"></param>
            <param name="capacity"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WriteHistogramSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierInsertMany(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="component_index"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierTakeMany(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Boolean,System.Boolean,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="num_elements">Input to the operation. </param>
            <param name="component_types"></param>
            <param name="allow_small_batch"></param>
            <param name="wait_for_incomplete"></param>
            <param name="timeout_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] keys(type: DtString).
            [2] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierClose(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="cancel_pending_enqueues"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierIncompleteSize(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GetSessionHandle(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GetSessionHandleV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeserializeSparse(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="serialized_sparse">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixInverse(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="adjoint"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GetSessionTensor(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NextIteration(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalFunctionBufferingResource(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.Int64,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="string_arg">Input to the operation. </param>
            <param name="target_device">Input to the operation. </param>
            <param name="shared_name"></param>
            <param name="container"></param>
            <param name="buffer_size"></param>
            <param name="output_types"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeleteSessionTensor(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Select(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="condition">Input to the operation. </param>
            <param name="t">Input to the operation. </param>
            <param name="e">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Stage(Emgu.TF.Output,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Unstage(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StagePeek(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="index">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StageSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CreateSummaryFileWriter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="logdir">Input to the operation. </param>
            <param name="max_queue">Input to the operation. </param>
            <param name="flush_millis">Input to the operation. </param>
            <param name="filename_suffix">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Asinh(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StageClear(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MapPeek(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeSparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized_sparse(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SelfAdjointEigV2(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_v"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] e(type: DtInvalid).
            [1] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapStage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InvGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableInsertV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MapUnstage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapUnstageNoKey(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtInt64).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorFromStringHandle(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="string_handle">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GuaranteeConst(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapIncompleteSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StaticRegexReplace(Emgu.TF.Output,System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern"></param>
            <param name="rewrite"></param>
            <param name="replace_global"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Square(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DataFormatVecPermute(Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="src_format"></param>
            <param name="dst_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapClear(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapStage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Bitcast(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapPeek(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapUnstageNoKey(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtInt64).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="adjoint"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseSingleSequenceExample(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],Emgu.TF.DataType[],System.Int64[][],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="feature_list_dense_missing_assumed_empty">Input to the operation. </param>
            <param name="context_sparse_keys">Input to the operation. </param>
            <param name="context_dense_keys">Input to the operation. </param>
            <param name="feature_list_sparse_keys">Input to the operation. </param>
            <param name="feature_list_dense_keys">Input to the operation. </param>
            <param name="context_dense_defaults">Input to the operation. </param>
            <param name="debug_name">Input to the operation. </param>
            <param name="context_sparse_types"></param>
            <param name="feature_list_dense_types"></param>
            <param name="context_dense_shapes"></param>
            <param name="feature_list_sparse_types"></param>
            <param name="feature_list_dense_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] context_sparse_indices(type: DtInt64).
            [1] context_sparse_values(type: DtInvalid).
            [2] context_sparse_shapes(type: DtInt64).
            [3] context_dense_values(type: DtInvalid).
            [4] feature_list_sparse_indices(type: DtInt64).
            [5] feature_list_sparse_values(type: DtInvalid).
            [6] feature_list_sparse_shapes(type: DtInt64).
            [7] feature_list_dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSparseMaximum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="b_values">Input to the operation. </param>
            <param name="b_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MakeIterator(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="iterator">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReduceDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="initial_state">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="use_inter_op_parallelism"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapIncompleteSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtypes"></param>
            <param name="capacity"></param>
            <param name="memory_limit"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Log(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Switch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="pred">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_false(type: DtInvalid).
            [1] output_true(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefSwitch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="pred">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_false(type: DtInvalid).
            [1] output_true(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Qr(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="full_matrices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] q(type: DtInvalid).
            [1] r(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalDirectedInterleaveDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="selector_input_dataset">Input to the operation. </param>
            <param name="data_input_datasets">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefSelect(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="index">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="y_backprop">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="reserve_space_1">Input to the operation. </param>
            <param name="reserve_space_2">Input to the operation. </param>
            <param name="epsilon"></param>
            <param name="data_format"></param>
            <param name="is_training"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] x_backprop(type: DtInvalid).
            [1] scale_backprop(type: DtInvalid).
            [2] offset_backprop(type: DtInvalid).
            [3] reserve_space_3(type: DtInvalid).
            [4] reserve_space_4(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListFromTensor(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sin(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Enter(Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="frame_name"></param>
            <param name="is_constant"></param>
            <param name="parallel_iterations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefEnter(Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="frame_name"></param>
            <param name="is_constant"></param>
            <param name="parallel_iterations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeAndCropJpeg(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Single,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="crop_window">Input to the operation. </param>
            <param name="channels"></param>
            <param name="ratio"></param>
            <param name="fancy_upscaling"></param>
            <param name="try_recover_truncated"></param>
            <param name="acceptable_fraction"></param>
            <param name="dct_method"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefExit(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeepCopy(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedMaxPool(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefNextIteration(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeRaw(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="bytes">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="little_endian"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LoopCond(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Abort(System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="error_msg"></param>
            <param name="exit_without_error"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeCSV(Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="records">Input to the operation. </param>
            <param name="record_defaults">Input to the operation. </param>
            <param name="field_delim"></param>
            <param name="use_quote_delim"></param>
            <param name="na_value"></param>
            <param name="select_cols"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalHasValue(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="optional">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] has_value(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IdentityReader(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorDataset(Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="components">Input to the operation. </param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorSliceDataset(Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="components">Input to the operation. </param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GeneratorDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="init_func_other_args">Input to the operation. </param>
            <param name="next_func_other_args">Input to the operation. </param>
            <param name="finalize_func_other_args">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchIFFT(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnbatchDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ZipDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_datasets">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorInit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="multi_device_iterator">Input to the operation. </param>
            <param name="max_buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] incarnation_id(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rpc(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="address">Input to the operation. </param>
            <param name="method">Input to the operation. </param>
            <param name="request">Input to the operation. </param>
            <param name="protocol"></param>
            <param name="fail_fast"></param>
            <param name="timeout_in_ms"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] response(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TakeDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CreateSummaryDbWriter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="db_uri">Input to the operation. </param>
            <param name="experiment_name">Input to the operation. </param>
            <param name="run_name">Input to the operation. </param>
            <param name="user_name">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Igammac(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SkipDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BytesProducedStatsDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LatencyStatsDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorFromStringHandleV2(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="string_handle">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TruncateDiv(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseExampleDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String[],System.String[],Emgu.TF.DataType[],System.Int64[][],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="dense_defaults">Input to the operation. </param>
            <param name="sparse_keys"></param>
            <param name="dense_keys"></param>
            <param name="sparse_types"></param>
            <param name="dense_shapes"></param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Expm1(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PrefetchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropInputV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input_sizes">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FlatMapDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelInterleaveDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="cycle_length">Input to the operation. </param>
            <param name="block_length">Input to the operation. </param>
            <param name="sloppy">Input to the operation. </param>
            <param name="buffer_output_elements">Input to the operation. </param>
            <param name="prefetch_input_elements">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdaMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthwiseConv2dNative(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelInterleaveDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="cycle_length">Input to the operation. </param>
            <param name="block_length">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="update_slots"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentProd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVarsPerChannelGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits"></param>
            <param name="narrow_range"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops_wrt_input(type: DtFloat).
            [1] backprop_wrt_min(type: DtFloat).
            [2] backprop_wrt_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GroupByReducerDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="key_func_other_arguments">Input to the operation. </param>
            <param name="init_func_other_arguments">Input to the operation. </param>
            <param name="reduce_func_other_arguments">Input to the operation. </param>
            <param name="finalize_func_other_arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UpperBound(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="sorted_inputs">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListConcatLists(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input_a">Input to the operation. </param>
            <param name="input_b">Input to the operation. </param>
            <param name="element_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FilterDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FilterByLastComponentDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WindowDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="shift">Input to the operation. </param>
            <param name="stride">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="update_slots"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="use_nesterov"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalNone(System.String)">
            <summary>
            
            </summary>
            <param name="opName">The name of the operation</param>
            <return>
            [0] optional(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddedBatchDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="padded_shapes">Input to the operation. </param>
            <param name="padding_values">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShuffleAndRepeatDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="seed2">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalGetValue(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="optional">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeArea(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnicodeScript(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Timestamp(System.String)">
            <summary>
            
            </summary>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ts(type: DtDouble).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CacheDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorSummaryV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="serialized_summary_metadata">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TextLineDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TFRecordDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReadUpTo(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="num_records">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtString).
            [1] values(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Iterator(System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="shared_name"></param>
            <param name="container"></param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentMean(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LRNGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Single,System.Single,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="input_grads">Input to the operation. </param>
            <param name="input_image">Input to the operation. </param>
            <param name="output_image">Input to the operation. </param>
            <param name="depth_radius"></param>
            <param name="bias"></param>
            <param name="alpha"></param>
            <param name="beta"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorV2(System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="shared_name"></param>
            <param name="container"></param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutexLock(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="mutex">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] mutex_lock(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AnonymousIterator(Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListPushBackBatch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_handles">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handles(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SdcaOptimizer(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Single,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="sparse_example_indices">Input to the operation. </param>
            <param name="sparse_feature_indices">Input to the operation. </param>
            <param name="sparse_feature_values">Input to the operation. </param>
            <param name="dense_features">Input to the operation. </param>
            <param name="example_weights">Input to the operation. </param>
            <param name="example_labels">Input to the operation. </param>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_weights">Input to the operation. </param>
            <param name="dense_weights">Input to the operation. </param>
            <param name="example_state_data">Input to the operation. </param>
            <param name="loss_type"></param>
            <param name="l1"></param>
            <param name="l2"></param>
            <param name="num_loss_partitions"></param>
            <param name="num_inner_iterations"></param>
            <param name="adaptative"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out_example_state_data(type: DtFloat).
            [1] out_delta_sparse_weights(type: DtFloat).
            [2] out_delta_dense_weights(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradWithArgmax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="argmax">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OneShotIterator(Emgu.TF.DataType[],System.Int64[][],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixBandPart(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_lower">Input to the operation. </param>
            <param name="num_upper">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] band(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorGetNext(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AudioSummary(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="sample_rate"></param>
            <param name="max_outputs"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorGetNextSync(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DatasetToSingleElement(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RGBToHSV(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIgnoreErrorsDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeserializeIterator(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource_handle">Input to the operation. </param>
            <param name="serialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.StatsAggregatorHandle(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReadFile(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatsAggregatorSummary(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeProto(Emgu.TF.Output,Emgu.TF.Output,System.String[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sizes">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="field_names"></param>
            <param name="message_type"></param>
            <param name="descriptor_source"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] bytes(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PrependFromQueueAndPaddedBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="padded_shapes">Input to the operation. </param>
            <param name="padding_values">Input to the operation. </param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionWithOverlaps(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="overlaps">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="overlap_threshold">Input to the operation. </param>
            <param name="score_threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EnqueueInQueueDataset(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="queue">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListGetItem(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="element_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] item(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="adjoint"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DatasetToTFRecord(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.DatasetToGraph(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] graph(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SinkDataset(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptimizeDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="optimizations">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalLMDBDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixTriangularSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="lower"></param>
            <param name="adjoint"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LinSpace(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="stop">Input to the operation. </param>
            <param name="num">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NotEqual(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalFromValue(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="components">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] optional(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ModelDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIterator(System.String[],System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="devices"></param>
            <param name="shared_name"></param>
            <param name="container"></param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReadUpToV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="num_records">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtString).
            [1] values(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessMultinomial(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="num_samples">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="output_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorToStringHandle(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="multi_device_iterator">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] string_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalCSVDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="header">Input to the operation. </param>
            <param name="field_delim">Input to the operation. </param>
            <param name="use_quote_delim">Input to the operation. </param>
            <param name="na_value">Input to the operation. </param>
            <param name="select_cols">Input to the operation. </param>
            <param name="record_defaults">Input to the operation. </param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchNormWithGlobalNormalizationGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="gamma">Input to the operation. </param>
            <param name="backprop">Input to the operation. </param>
            <param name="variance_epsilon"></param>
            <param name="scale_after_normalization"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] dx(type: DtInvalid).
            [1] dm(type: DtInvalid).
            [2] dv(type: DtInvalid).
            [3] db(type: DtInvalid).
            [4] dg(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalUniqueDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DrawBoundingBoxes(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IdentityReaderV2(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIteratorGetDevice(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] device(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Size(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalFunctionBufferingResourceGetNext(Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="function_buffer_resource">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniqueV2(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="out_idx"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalFunctionBufferingResourceReset(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="function_buffer_resource">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Elu(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradGradV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalThreadPoolDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="thread_pool">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalThreadPoolHandle(System.Int64,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="num_threads"></param>
            <param name="display_name"></param>
            <param name="max_intra_op_parallelism"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Assign(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="validate_shape"></param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListReserve(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="element_shape">Input to the operation. </param>
            <param name="num_elements">Input to the operation. </param>
            <param name="element_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalAssertNextDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="transformations">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomCrop(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderSerializeStateV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] state(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIndexedDatasetMaterialize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="materialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteScalarSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseDenseCwiseAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="dense">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Div(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Fill(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="dims">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3D(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WriteGraphSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIndexedDatasetGet(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="materialized">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="output_types"></param>
            <param name="output_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeProtoV2(Emgu.TF.Output,System.String,System.String[],Emgu.TF.DataType[],System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="bytes">Input to the operation. </param>
            <param name="message_type"></param>
            <param name="field_names"></param>
            <param name="output_types"></param>
            <param name="descriptor_source"></param>
            <param name="message_format"></param>
            <param name="sanitize"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sizes(type: DtInt32).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBicubic(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InTopKV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="predictions">Input to the operation. </param>
            <param name="targets">Input to the operation. </param>
            <param name="k">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] precision(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBicubicGrad(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="original_image">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SpaceToDepth(Emgu.TF.Output,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_size"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBilinear(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedResizeBilinear(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtInvalid).
            [1] out_min(type: DtFloat).
            [2] out_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBilinearGrad(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="original_image">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixDiag(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeNearestNeighbor(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeJpeg(Emgu.TF.Output,System.String,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="format"></param>
            <param name="quality"></param>
            <param name="progressive"></param>
            <param name="optimize_size"></param>
            <param name="chroma_downsampling"></param>
            <param name="density_unit"></param>
            <param name="x_density"></param>
            <param name="y_density"></param>
            <param name="xmp_metadata"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractJpegShape(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="output_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image_shape(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BesselI1e(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustContrast(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="contrast_factor">Input to the operation. </param>
            <param name="min_value">Input to the operation. </param>
            <param name="max_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustHue(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniqueWithCountsV2(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="out_idx"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            [2] count(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustSaturation(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodePng(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="compression"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeGif(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HSVToRGB(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxArgs(Emgu.TF.Output,System.Single,System.Single,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="num_bits"></param>
            <param name="narrow_range"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SampleDistortedBoundingBox(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Single,System.Single[],System.Single[],System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="image_size">Input to the operation. </param>
            <param name="bounding_boxes">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="min_object_covered"></param>
            <param name="aspect_ratio_range"></param>
            <param name="area_range"></param>
            <param name="max_attempts"></param>
            <param name="use_image_if_no_bounding_boxes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] begin(type: DtInvalid).
            [1] size(type: DtInvalid).
            [2] bboxes(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutexV2(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SampleDistortedBoundingBoxV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Single[],System.Single[],System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="image_size">Input to the operation. </param>
            <param name="bounding_boxes">Input to the operation. </param>
            <param name="min_object_covered">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="aspect_ratio_range"></param>
            <param name="area_range"></param>
            <param name="max_attempts"></param>
            <param name="use_image_if_no_bounding_boxes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] begin(type: DtInvalid).
            [1] size(type: DtInvalid).
            [2] bboxes(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderSerializeState(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] state(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractGlimpse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="offsets">Input to the operation. </param>
            <param name="centered"></param>
            <param name="normalized"></param>
            <param name="uniform_noise"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] glimpse(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsInf(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CropAndResize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="box_ind">Input to the operation. </param>
            <param name="crop_size">Input to the operation. </param>
            <param name="method"></param>
            <param name="extrapolation_value"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] crops(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SaveV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="prefix">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="shape_and_slices">Input to the operation. </param>
            <param name="tensors">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTableOfTensorsV2(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="key_dtype"></param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="value_shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CropAndResizeGradImage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="box_ind">Input to the operation. </param>
            <param name="image_size">Input to the operation. </param>
            <param name="T"></param>
            <param name="method"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TFRecordReaderV2(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="compression_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Atanh(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppression(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CropAndResizeGradBoxes(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="image">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="box_ind">Input to the operation. </param>
            <param name="method"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Slice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold">Input to the operation. </param>
            <param name="score_threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionV4(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold">Input to the operation. </param>
            <param name="score_threshold">Input to the operation. </param>
            <param name="pad_to_max_output_size"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            [1] valid_outputs(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentMin(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Save(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTableOfTensors(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="key_dtype"></param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="value_shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropFilterV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter_sizes">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TopKV2(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="k">Input to the operation. </param>
            <param name="sorted"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            [1] indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Restore(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="file_pattern">Input to the operation. </param>
            <param name="tensor_name">Input to the operation. </param>
            <param name="dt"></param>
            <param name="preferred_shard"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RestoreSlice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="file_pattern">Input to the operation. </param>
            <param name="tensor_name">Input to the operation. </param>
            <param name="shape_and_slice">Input to the operation. </param>
            <param name="dt"></param>
            <param name="preferred_shard"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShardedFilename(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="basename">Input to the operation. </param>
            <param name="shard">Input to the operation. </param>
            <param name="num_shards">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filename(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShardedFilespec(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="basename">Input to the operation. </param>
            <param name="num_shards">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filename(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BiasAdd(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TextLineReaderV2(System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="skip_header_lines"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListGather(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="element_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedLengthRecordReader(System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="record_bytes"></param>
            <param name="header_bytes"></param>
            <param name="footer_bytes"></param>
            <param name="hop_bytes"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConcatV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TFRecordReader(System.String,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="compression_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSplit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="split_dim">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="num_split"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LMDBReader(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderRead(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtString).
            [1] value(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StridedSlice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="begin_mask"></param>
            <param name="end_mask"></param>
            <param name="ellipsis_mask"></param>
            <param name="new_axis_mask"></param>
            <param name="shrink_axis_mask"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Empty(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="init"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReadV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtString).
            [1] value(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPool3DGrad(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input_shape">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumRecordsProduced(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] records_produced(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumWorkUnitsCompleted(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] units_completed(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogMatrixDeterminant(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sign(type: DtInvalid).
            [1] log_abs_determinant(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumWorkUnitsCompletedV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] units_completed(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderRestoreState(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="state">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderRestoreStateV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="state">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AssignSubVariableOp(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReset(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Multinomial(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="num_samples">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="output_dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WriteFile(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="contents">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.IFFT2D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InvertPermutation(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixLogarithm(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TopK(Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="k"></param>
            <param name="sorted"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            [1] indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cholesky(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthwiseConv2dNativeBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter_sizes">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CholeskyGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="l">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyPowerSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="logbase">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SelfAdjointEig(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixTriangularSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="lower"></param>
            <param name="adjoint"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CountUpTo(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="limit"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Exp(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Svd(Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_uv"></param>
            <param name="full_matrices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] s(type: DtInvalid).
            [1] u(type: DtInvalid).
            [2] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomShuffle(Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Requantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="requested_output_min">Input to the operation. </param>
            <param name="requested_output_max">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchSelfAdjointEig(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixDeterminant(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.While(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rint(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddN(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sum(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Diag(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixInverse(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="adjoint"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVarsGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits"></param>
            <param name="narrow_range"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops_wrt_input(type: DtFloat).
            [1] backprop_wrt_min(type: DtFloat).
            [2] backprop_wrt_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchCholesky(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchCholeskyGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="l">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixSolveLs(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="l2_regularizer">Input to the operation. </param>
            <param name="fast"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableImport(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterDiv(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.IsNan(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchSvd(Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_uv"></param>
            <param name="full_matrices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] s(type: DtInvalid).
            [1] u(type: DtInvalid).
            [2] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListPushBack(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalAvgPool(Emgu.TF.Output,System.Single[],System.Boolean,System.Boolean,System.Boolean,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="pooling_ratio"></param>
            <param name="pseudo_random"></param>
            <param name="overlapping"></param>
            <param name="deterministic"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] row_pooling_sequence(type: DtInt64).
            [2] col_pooling_sequence(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListLength(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] length(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Mean(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListStack(Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="element_dtype"></param>
            <param name="num_elements"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListElementShape(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="shape_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] element_shape(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Identity(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListSetItem(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="item">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableFind(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableInsert(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeTensor(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableSize(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableSizeV2(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableExport(Emgu.TF.Output,Emgu.TF.DataType,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="Tkeys"></param>
            <param name="Tvalues"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtInvalid).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rsqrt(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableExportV2(Emgu.TF.Output,Emgu.TF.DataType,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="Tkeys"></param>
            <param name="Tvalues"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtInvalid).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableImportV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AssignAddVariableOp(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.HashTable(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="key_dtype"></param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HashTableV2(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="key_dtype"></param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterMin(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTableV2(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="key_dtype"></param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableDenseHashTable(Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.Int64,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="empty_key">Input to the operation. </param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="value_shape"></param>
            <param name="initial_num_buckets"></param>
            <param name="max_load_factor"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableDenseHashTableV2(Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.Int64,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="empty_key">Input to the operation. </param>
            <param name="value_dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="use_node_name_sharing"></param>
            <param name="value_shape"></param>
            <param name="initial_num_buckets"></param>
            <param name="max_load_factor"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdam(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="beta2_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="use_nesterov"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTableFromTextFile(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="key_index"></param>
            <param name="value_index"></param>
            <param name="vocab_size"></param>
            <param name="delimiter"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.For(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="limit">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Tanh(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTableFromTextFileV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="key_index"></param>
            <param name="value_index"></param>
            <param name="vocab_size"></param>
            <param name="delimiter"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Assert(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="condition">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="summarize"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Print(Emgu.TF.Output,Emgu.TF.Output,System.String,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="message"></param>
            <param name="first_n"></param>
            <param name="summarize"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PrintV2(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="output_stream"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorSummary(Emgu.TF.Output,System.String,System.String[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="description"></param>
            <param name="labels"></param>
            <param name="display_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HistogramSummary(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AudioSummaryV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="max_outputs"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdaMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MergeSummary(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IFFT(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FFT2D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FFT3D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RFFT(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IRFFT(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RFFT2D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IRFFT3D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolWithArgmax(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="Targmax"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] argmax(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Reverse(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="dims">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchIFFT3D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFFT(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFFT2D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFFT3D(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeCompressed(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="bytes">Input to the operation. </param>
            <param name="compression_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseExample(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="names">Input to the operation. </param>
            <param name="sparse_keys">Input to the operation. </param>
            <param name="dense_keys">Input to the operation. </param>
            <param name="dense_defaults">Input to the operation. </param>
            <param name="sparse_types"></param>
            <param name="dense_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shapes(type: DtInt64).
            [3] dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseSingleExample(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String[],System.String[],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="dense_defaults">Input to the operation. </param>
            <param name="num_sparse"></param>
            <param name="sparse_keys"></param>
            <param name="dense_keys"></param>
            <param name="sparse_types"></param>
            <param name="dense_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shapes(type: DtInt64).
            [3] dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PreventGradient(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="message"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseTensor(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseSequenceExample(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String[],System.String[],System.String[],System.String[],System.String[],System.Int64,System.Int64,System.Int64,System.Int64,Emgu.TF.DataType[],Emgu.TF.DataType[],System.Int64[][],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="debug_name">Input to the operation. </param>
            <param name="context_dense_defaults">Input to the operation. </param>
            <param name="feature_list_dense_missing_assumed_empty"></param>
            <param name="context_sparse_keys"></param>
            <param name="context_dense_keys"></param>
            <param name="feature_list_sparse_keys"></param>
            <param name="feature_list_dense_keys"></param>
            <param name="Ncontext_sparse"></param>
            <param name="Ncontext_dense"></param>
            <param name="Nfeature_list_sparse"></param>
            <param name="Nfeature_list_dense"></param>
            <param name="context_sparse_types"></param>
            <param name="feature_list_dense_types"></param>
            <param name="context_dense_shapes"></param>
            <param name="feature_list_sparse_types"></param>
            <param name="feature_list_dense_shapes"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] context_sparse_indices(type: DtInt64).
            [1] context_sparse_values(type: DtInvalid).
            [2] context_sparse_shapes(type: DtInt64).
            [3] context_dense_values(type: DtInvalid).
            [4] feature_list_sparse_indices(type: DtInt64).
            [5] feature_list_sparse_values(type: DtInvalid).
            [6] feature_list_sparse_shapes(type: DtInt64).
            [7] feature_list_dense_values(type: DtInvalid).
            [8] feature_list_dense_lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Tile(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="multiples">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeJSONExample(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="json_examples">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] binary_examples(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToNumber(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="string_tensor">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyPowerSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="logbase">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.RemoteFusedGraphExecute(Emgu.TF.Output,Emgu.TF.DataType[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="Toutputs"></param>
            <param name="serialized_remote_fused_graph_execute_info"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DestroyResourceOp(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="ignore_lookup_error"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cumsum(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="exclusive"></param>
            <param name="reverse"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchNormWithGlobalNormalization(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="gamma">Input to the operation. </param>
            <param name="variance_epsilon"></param>
            <param name="scale_after_normalization"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conj(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AssignVariableOp(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ImmutableConst(Emgu.TF.DataType,System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="dtype"></param>
            <param name="shape"></param>
            <param name="memory_region_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceGather(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="validate_indices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Ceil(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReverseSequence(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="seq_lengths">Input to the operation. </param>
            <param name="seq_dim"></param>
            <param name="batch_dim"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.NoOp(System.String)">
            <summary>
            
            </summary>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Reciprocal(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReduceJoin(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="separator"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SdcaFprint(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPool(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormGradV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="y_backprop">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="reserve_space_1">Input to the operation. </param>
            <param name="reserve_space_2">Input to the operation. </param>
            <param name="epsilon"></param>
            <param name="data_format"></param>
            <param name="is_training"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] x_backprop(type: DtInvalid).
            [1] scale_backprop(type: DtInvalid).
            [2] offset_backprop(type: DtInvalid).
            [3] reserve_space_3(type: DtInvalid).
            [4] reserve_space_4(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv2D(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Boolean,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="use_cudnn_on_gpu"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSoftmax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv2DBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Boolean,System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter_sizes">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="use_cudnn_on_gpu"></param>
            <param name="data_format"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedResizeAndPadConv2D(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Int64[],System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="mode"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="resize_align_corners"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseDenseCwiseMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="dense">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogSoftmax(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] logsoftmax(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedPadConv2D(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="mode"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShapeN(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPool3D(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool3DGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool3DGradGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessIf(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="cond">Input to the operation. </param>
            <param name="input">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterDiv(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.L2Loss(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="padding"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradGradWithArgmax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="argmax">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Neg(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dilation2D(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides"></param>
            <param name="rates"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dilation2DBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="rates"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] in_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dilation2DBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides"></param>
            <param name="rates"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filter_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Relu(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Relu6Grad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Selu(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StopGradient(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Softplus(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SoftplusGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Softsign(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SoftsignGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Erfc(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReciprocalGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Softmax(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] softmax(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="min_x">Input to the operation. </param>
            <param name="max_x">Input to the operation. </param>
            <param name="min_y">Input to the operation. </param>
            <param name="max_y">Input to the operation. </param>
            <param name="Toutput"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            [1] min_z(type: DtFloat).
            [2] max_z(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SoftmaxCrossEntropyWithLogits(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="labels">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] loss(type: DtInvalid).
            [1] backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSoftmaxCrossEntropyWithLogits(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="labels">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] loss(type: DtInvalid).
            [1] backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PartitionedCall(Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="args">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedAvgPool(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="ksize"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedBiasAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_bias">Input to the operation. </param>
            <param name="max_bias">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_out(type: DtFloat).
            [2] max_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2D(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="out_type"></param>
            <param name="dilations"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedRelu(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="min_features">Input to the operation. </param>
            <param name="max_features">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            [1] min_activations(type: DtFloat).
            [2] max_activations(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedRelu6(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="min_features">Input to the operation. </param>
            <param name="max_features">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            [1] min_activations(type: DtFloat).
            [2] max_activations(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedReluX(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="max_value">Input to the operation. </param>
            <param name="min_features">Input to the operation. </param>
            <param name="max_features">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            [1] min_activations(type: DtFloat).
            [2] max_activations(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.All(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedBatchNormWithGlobalNormalization(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Single,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="t_min">Input to the operation. </param>
            <param name="t_max">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="m_min">Input to the operation. </param>
            <param name="m_max">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="v_min">Input to the operation. </param>
            <param name="v_max">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="beta_min">Input to the operation. </param>
            <param name="beta_max">Input to the operation. </param>
            <param name="gamma">Input to the operation. </param>
            <param name="gamma_min">Input to the operation. </param>
            <param name="gamma_max">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="variance_epsilon"></param>
            <param name="scale_after_normalization"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result(type: DtInvalid).
            [1] result_min(type: DtFloat).
            [2] result_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InplaceUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="i">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InplaceAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="i">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InplaceSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="i">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Unpack(Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="num"></param>
            <param name="axis"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnravelIndex(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="dims">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BroadcastTo(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Concat(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="concat_dim">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConcatOffset(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="concat_dim">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] offset(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Split(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="split_dim">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="num_split"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Const(Emgu.TF.Tensor,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="value"></param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ZerosLike(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OnesLike(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rank(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DiagPart(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] diagonal(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixSetDiag(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixDiagPart(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] diagonal(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixBandPart(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_lower">Input to the operation. </param>
            <param name="num_upper">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] band(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReverseV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EditDistance(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="hypothesis_indices">Input to the operation. </param>
            <param name="hypothesis_values">Input to the operation. </param>
            <param name="hypothesis_shape">Input to the operation. </param>
            <param name="truth_indices">Input to the operation. </param>
            <param name="truth_values">Input to the operation. </param>
            <param name="truth_shape">Input to the operation. </param>
            <param name="normalize"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Snapshot(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IdentityN(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefIdentity(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExpandDims(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="dim">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DebugGradientIdentity(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DebugGradientRefIdentity(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSliceGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="backprop_val_grad">Input to the operation. </param>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_start">Input to the operation. </param>
            <param name="output_indices">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] val_grad(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Reshape(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConjugateTranspose(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="perm">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Unique(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="out_idx"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniqueWithCounts(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="out_idx"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            [2] count(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Shape(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EnsureShape(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StridedSliceGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="begin_mask"></param>
            <param name="end_mask"></param>
            <param name="ellipsis_mask"></param>
            <param name="new_axis_mask"></param>
            <param name="shrink_axis_mask"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Min(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StridedSliceAssign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="begin_mask"></param>
            <param name="end_mask"></param>
            <param name="ellipsis_mask"></param>
            <param name="new_axis_mask"></param>
            <param name="shrink_axis_mask"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceStridedSliceAssign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="begin_mask"></param>
            <param name="end_mask"></param>
            <param name="ellipsis_mask"></param>
            <param name="new_axis_mask"></param>
            <param name="shrink_axis_mask"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TileGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="multiples">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Where(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] index(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BroadcastArgs(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="s0">Input to the operation. </param>
            <param name="s1">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] r0(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BroadcastGradientArgs(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="s0">Input to the operation. </param>
            <param name="s1">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] r0(type: DtInvalid).
            [1] r1(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Pad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PadV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="constant_values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MirrorPad(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="mode"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MirrorPadGrad(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="mode"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Placeholder(Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="dtype"></param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PlaceholderV2(Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="dtype"></param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Squeeze(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="squeeze_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchToSpaceND(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_shape">Input to the operation. </param>
            <param name="crops">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthToSpace(Emgu.TF.Output,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_size"></param>
            <param name="data_format"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractImagePatches(Emgu.TF.Output,System.Int64[],System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="ksizes"></param>
            <param name="strides"></param>
            <param name="rates"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] patches(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractVolumePatches(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksizes"></param>
            <param name="strides"></param>
            <param name="padding"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] patches(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OneHot(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="depth">Input to the operation. </param>
            <param name="on_value">Input to the operation. </param>
            <param name="off_value">Input to the operation. </param>
            <param name="axis"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeAndDequantize(Emgu.TF.Output,System.Boolean,System.Int64,System.Boolean,System.Single,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="signed_input"></param>
            <param name="num_bits"></param>
            <param name="range_given"></param>
            <param name="input_min"></param>
            <param name="input_max"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeAndDequantizeV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="signed_input"></param>
            <param name="num_bits"></param>
            <param name="range_given"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeAndDequantizeV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="num_bits">Input to the operation. </param>
            <param name="signed_input"></param>
            <param name="range_given"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_range">Input to the operation. </param>
            <param name="max_range">Input to the operation. </param>
            <param name="T"></param>
            <param name="mode"></param>
            <param name="round_mode"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConcat(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="concat_dim">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="input_mins">Input to the operation. </param>
            <param name="input_maxes">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedReshape(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LowerBound(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="sorted_inputs">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxArgsGradient(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Single,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="num_bits"></param>
            <param name="narrow_range"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVars(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits"></param>
            <param name="narrow_range"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVarsPerChannel(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits"></param>
            <param name="narrow_range"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixDiag(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixSetDiag(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixDiagPart(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] diagonal(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DenseToSparseSetOperation(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="set1">Input to the operation. </param>
            <param name="set2_indices">Input to the operation. </param>
            <param name="set2_values">Input to the operation. </param>
            <param name="set2_shape">Input to the operation. </param>
            <param name="set_operation"></param>
            <param name="validate_indices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result_indices(type: DtInt64).
            [1] result_values(type: DtInvalid).
            [2] result_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseToSparseSetOperation(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="set1_indices">Input to the operation. </param>
            <param name="set1_values">Input to the operation. </param>
            <param name="set1_shape">Input to the operation. </param>
            <param name="set2_indices">Input to the operation. </param>
            <param name="set2_values">Input to the operation. </param>
            <param name="set2_shape">Input to the operation. </param>
            <param name="set_operation"></param>
            <param name="validate_indices"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result_indices(type: DtInt64).
            [1] result_values(type: DtInvalid).
            [2] result_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulateNV2(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sum(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cast(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="DstT"></param>
            <param name="Truncate"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Abs(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ComplexAbs(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Tan(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Inv(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sqrt(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Log1p(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToHashBucket(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="string_tensor">Input to the operation. </param>
            <param name="num_buckets"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sinh(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cosh(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Acosh(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessRandomUniform(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TanhGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Digamma(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomStandardNormal(Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cos(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RequantizationRange(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_min(type: DtFloat).
            [1] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Asin(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Acos(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Atan(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsFinite(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Polygamma(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sub(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Mul(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FloorDiv(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Xlogy(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Xdivy(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Maximum(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Minimum(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RemoteCall(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="target">Input to the operation. </param>
            <param name="args">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Mod(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Pow(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Igamma(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IgammaGradA(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Zeta(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="q">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Atan2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Less(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LessEqual(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Greater(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Equal(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Variable(System.Int64[],Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogicalNot(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogicalAnd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogicalOr(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToHashBucketFast(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_buckets"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatMul(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="transpose_a"></param>
            <param name="transpose_b"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sum(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseFillEmptyRowsGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reverse_index_map">Input to the operation. </param>
            <param name="grad_values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] d_values(type: DtInvalid).
            [1] d_default_value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Prod(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Max(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ArgMax(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="dimension">Input to the operation. </param>
            <param name="output_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ArgMin(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="dimension">Input to the operation. </param>
            <param name="output_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CloseSummaryWriter(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentMin(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentMax(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentSum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAddSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentMean(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentMeanGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="output_dim0">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSqrtN(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSqrtNWithNumSegments(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSqrtNGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="output_dim0">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Any(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Range(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="limit">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AssignAdd(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Complex(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="real">Input to the operation. </param>
            <param name="imag">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceCountUpTo(Emgu.TF.Output,System.Int64,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="limit"></param>
            <param name="T"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Angle(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cross(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HistogramFixedWidth(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="value_range">Input to the operation. </param>
            <param name="nbins">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Bincount(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="arr">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="weights">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] bins(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedMatMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.Boolean,System.Boolean,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="min_a">Input to the operation. </param>
            <param name="max_a">Input to the operation. </param>
            <param name="min_b">Input to the operation. </param>
            <param name="max_b">Input to the operation. </param>
            <param name="Toutput"></param>
            <param name="transpose_a"></param>
            <param name="transpose_b"></param>
            <param name="Tactivation"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            [1] min_out(type: DtFloat).
            [2] max_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="min_x">Input to the operation. </param>
            <param name="max_x">Input to the operation. </param>
            <param name="min_y">Input to the operation. </param>
            <param name="max_y">Input to the operation. </param>
            <param name="Toutput"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            [1] min_z(type: DtFloat).
            [2] max_z(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeDownAndShrinkRange(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="update_slots"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Invert(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BitwiseAnd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BitwiseXor(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LeftShift(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.RightShift(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAddGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="backprop_val_grad">Input to the operation. </param>
            <param name="a_indices">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="sum_indices">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] a_val_grad(type: DtInvalid).
            [1] b_val_grad(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="b_values">Input to the operation. </param>
            <param name="b_shape">Input to the operation. </param>
            <param name="thresh">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sum_indices(type: DtInt64).
            [1] sum_values(type: DtInvalid).
            [2] sum_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseTensorDenseMatMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="adjoint_a"></param>
            <param name="adjoint_b"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeManySparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="out_type"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized_sparse(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeserializeManySparse(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            
            </summary>
            <param name="serialized_sparse">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseConcat(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shapes">Input to the operation. </param>
            <param name="concat_dim"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSlice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="start">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReorder(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseTensorDenseAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceMaxSparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceSum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseDenseCwiseDiv(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="dense">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSparseMinimum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="b_values">Input to the operation. </param>
            <param name="b_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddSparseToTensorsMap(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_handle(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddManySparseToTensorsMap(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_handles(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseFillEmptyRows(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dense_shape">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] empty_row_indicator(type: DtBool).
            [3] reverse_index_map(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParameterizedTruncatedNormal(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="means">Input to the operation. </param>
            <param name="stdevs">Input to the operation. </param>
            <param name="minvals">Input to the operation. </param>
            <param name="maxvals">Input to the operation. </param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TruncatedNormal(Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="seed"></param>
            <param name="seed2"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomGammaGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="alpha">Input to the operation. </param>
            <param name="sample">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessRandomNormal(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessTruncatedNormal(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="dtype"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RegexReplace(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern">Input to the operation. </param>
            <param name="rewrite">Input to the operation. </param>
            <param name="replace_global"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RegexFullMatch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StaticRegexFullMatch(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToHashBucketStrong(Emgu.TF.Output,System.Int64,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_buckets"></param>
            <param name="key"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AsString(Emgu.TF.Output,System.Int64,System.Boolean,System.Boolean,System.Int64,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="precision"></param>
            <param name="scientific"></param>
            <param name="shortest"></param>
            <param name="width"></param>
            <param name="fill"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringJoin(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="separator"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringSplit(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="delimiter">Input to the operation. </param>
            <param name="skip_empty"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] values(type: DtString).
            [2] shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringSplitV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="sep">Input to the operation. </param>
            <param name="maxsplit"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] values(type: DtString).
            [2] shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringLength(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="unit"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Substr(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pos">Input to the operation. </param>
            <param name="len">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeBase64(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pad"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeBase64(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SummaryWriter(System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="shared_name"></param>
            <param name="container"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] writer(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FlushSummaryWriter(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="summary_metadata">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ImportEvent(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="tfEvent">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteImageSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="bad_color">Input to the operation. </param>
            <param name="max_images"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.VariableV2(System.Int64[],Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="dtype"></param>
            <param name="container"></param>
            <param name="shared_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsVariableInitialized(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TemporaryVariable(System.Int64[],Emgu.TF.DataType,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="shape"></param>
            <param name="dtype"></param>
            <param name="var_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DestroyTemporaryVariable(Emgu.TF.Output,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="var_name"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AssignSub(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterMin(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterNdUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="update_slots"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="use_nesterov"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="use_nesterov"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking"></param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Skipgram(System.String,System.Int64,System.Int64,System.Int64,System.Single,System.String)">
            <summary>
            
            </summary>
            <param name="filename"></param>
            <param name="batch_size"></param>
            <param name="window_size"></param>
            <param name="min_count"></param>
            <param name="subsample"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] vocab_word(type: DtString).
            [1] vocab_freq(type: DtInt32).
            [2] words_per_epoch(type: DtInt64).
            [3] current_epoch(type: DtInt32).
            [4] total_words_processed(type: DtInt64).
            [5] examples(type: DtInt32).
            [6] labels(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SymbolicGradient(Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessWhile(Emgu.TF.Output,System.String)">
            <summary>
            
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulPartitionedCall(Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            
            </summary>
            <param name="args">Input to the operation. </param>
            <param name="Tout"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeParam(Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            
            </summary>
            <param name="dtype"></param>
            <param name="shape"></param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="P:Emgu.TF.Graph.Item(System.String)">
            <summary>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </summary>
            <param name="name">The name of the operation</param>
            <returns>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </returns>
        </member>
        <member name="P:Emgu.TF.Graph.NumFunctions">
            <summary>
            Returns the number of TF_Functions registered in the graph
            </summary>
        </member>
        <member name="T:Emgu.TF.ImportGraphDefOptions">
            <summary>
            ImportGraphDefOptions holds options that can be passed to Graph.ImportGraphDef
            </summary>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.#ctor">
            <summary>
            Create an empty GraphDefOptions
            </summary>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.DisposeObject">
            <summary>
            Release all the memory associated with this GraphDefOptions
            </summary>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.SetPrefix(System.String)">
            <summary>
            Set the prefix to be prepended to the names of nodes in `graph_def` that will
            be imported into `graph`.
            </summary>
            <param name="prefix">The node prefix</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.AddInputMapping(System.String,System.Int32,Emgu.TF.Output)">
            <summary>
            Set any imported nodes with input <paramref name="srcName"/>:<paramref name="srcIndex"/> to have that input
            replaced with <paramref name="dst"/>.
            </summary>
            <param name="srcName">Refers to a node in the graph to be imported</param>
            <param name="srcIndex">The source node index.</param>
            <param name="dst">References a node already existing in the graph being imported into</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.RemapControlDependency(System.String,Emgu.TF.Operation)">
            <summary>
            Set any imported nodes with control input <paramref name="srcName"/> to have that input
            replaced with <paramref name="dst"/>
            </summary>
            <param name="srcName">Refers to a node in the graph to be imported</param>
            <param name="dst">References an operation already existing in the graph being imported into</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.AddControlDependency(Emgu.TF.Operation)">
            <summary>
            Cause the imported graph to have a control dependency on <paramref name="oper"/>
            </summary>
            <param name="oper">The opration that the graph will have a control dependecy on. Should exist in the graph being imported into.</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.AddReturnOutput(System.String,System.Int32)">
            <summary>
            Add an output in graph_def to be returned via the `return_outputs` output
            parameter. If the output is remapped via an input
            mapping, the corresponding existing tensor in graph will be returned.
            </summary>
            <param name="operName">The name of the operation</param>
            <param name="index">The index</param>
        </member>
        <member name="P:Emgu.TF.ImportGraphDefOptions.NumReturnOutputs">
            <summary>
            Get the number of return outputs
            </summary>
        </member>
        <member name="T:Emgu.TF.Input">
            <summary>
            Represents a specific input of an operation.
            </summary>
        </member>
        <member name="F:Emgu.TF.Input.Operation">
            <summary>
            The Operation
            </summary>
        </member>
        <member name="F:Emgu.TF.Input.Index">
            <summary>
            The index of the input within the operation
            </summary>
        </member>
        <member name="M:Emgu.TF.Input.#ctor(Emgu.TF.Operation,System.Int32)">
            <summary>
            Create an input by specifying the operation and index.
            </summary>
            <param name="operation">The operation</param>
            <param name="index">The index of the input within the operation</param>
        </member>
        <member name="P:Emgu.TF.Input.InputType">
            <summary>
            Get the input type of the specific input index
            </summary>
            <returns>The input type of the specific input index</returns>
        </member>
        <member name="T:Emgu.TF.Library">
            <summary>
            The Library that can be used to load new Tensorflow modules.
            </summary>
        </member>
        <member name="M:Emgu.TF.Library.#ctor(System.String,Emgu.TF.Status)">
            <summary>
            Load the library specified by libraryFilename and register the ops and
            kernels present in that library.
            </summary>
            <param name="libraryFilename">The library file name</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Library.GetOpList">
            <summary>
            Get the OpList of OpDefs defined in the library
            </summary>
            <returns>Returns a Buffer. The memory pointed to by the result is owned by
            lib_handle. The data in the buffer will be the serialized OpList proto for
            ops defined in the library.
            </returns>
        </member>
        <member name="M:Emgu.TF.Library.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this Library.
            </summary>
        </member>
        <member name="T:Emgu.TF.Operation">
            <summary>
            Tensorflow operation
            </summary>
        </member>
        <member name="M:Emgu.TF.Operation.op_Implicit(Emgu.TF.Operation)~System.IntPtr">
            <summary>
            Implicit operator for IntPtr
            </summary>
            <param name="obj">The Operation</param>
            <returns>The Operation pointer for this object</returns>
        </member>
        <member name="M:Emgu.TF.Operation.op_Implicit(Emgu.TF.Operation)~Emgu.TF.Output">
            <summary>
            Implicit operator for Output
            </summary>
            <param name="obj">The operation</param>
            <returns>The first output of this operation</returns>
        </member>
        <member name="P:Emgu.TF.Operation.Empty">
            <summary>
            Return true if the operation is empty
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Ptr">
            <summary>
            Get the unmanaged pointer to the Operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Name">
            <summary>
            Get the name of the operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.OpType">
            <summary>
            Get the operation type
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Device">
            <summary>
            Get the name of the device this operation runs on
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumOutputs">
            <summary>
            Get the number of outputs for this operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumInputs">
            <summary>
            Get the number of inputs for this operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Inputs">
            <summary>
            Get the inputs
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Outputs">
            <summary>
            Get the outputs
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumControlInputs">
            <summary>
            Get the number of control inputs
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.ControlInputs">
            <summary>
            Get list of all control inputs to an operation.
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumControlOutputs">
            <summary>
            Get the number of control outputs.
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.ControlOutputs">
            <summary>
            Get the list of operations that have the current operation as a control input.
            </summary>
        </member>
        <member name="T:Emgu.TF.OperationDescription">
            <summary>
            Operation being built. The underlying graph must outlive this
            </summary>
        </member>
        <member name="M:Emgu.TF.OperationDescription.FinishOperation(Emgu.TF.Status)">
            <summary>
            If this function succeeds:
            status is set to an OK value,
            an Operation is added to the graph,
            a non-null value pointing to the added operation is returned
            -- this value is valid until the underlying graph is deleted.
            Otherwise:
            status is set to a non-OK value,
            the graph is not modified,
            a null value is returned.
            In either case, it deletes the OperationDescription.
            </summary>
            <param name="status">The status</param>
            <returns>If success, the Operation that is added to the graph, otherwise null.</returns>
        </member>
        <member name="M:Emgu.TF.OperationDescription.AddInput(Emgu.TF.Output)">
            <summary>
            Add the input to this operation description
            </summary>
            <param name="input">The input to the operation</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.AddInput(Emgu.TF.Output[])">
            <summary>
            Add the inputs to this operation description
            </summary>
            <param name="inputs">The inputs to the operation</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Int64)">
            <summary>
            Set a long value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Int64[])">
            <summary>
            Set an array of long value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Boolean)">
            <summary>
            Set a boolean value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Boolean[])">
            <summary>
            Set an array of boolean value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Single)">
            <summary>
            Set a floating point value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Single[])">
            <summary>
            Set an array of floating point value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.String)">
            <summary>
            Set a string value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.String[])">
            <summary>
            Set a string value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,Emgu.TF.DataType)">
            <summary>
            Set a DataType value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,Emgu.TF.DataType[])">
            <summary>
            Set an array of DataType value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="types">The types</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttrShape(System.String,System.Int64[])">
            <summary>
            Set a shape as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="shape">The shape</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttrShapeList(System.String,System.Int64[][])">
            <summary>
            Set a shape list as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="shapes">The shapes</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,Emgu.TF.Tensor,Emgu.TF.Status)">
            <summary>
            Set a Tensor as an attribute
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="tensor">The Tensor</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetDevice(System.String)">
            <summary>
            Specify the device
            </summary>
            <param name="device">The device name</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.AddControlInput(Emgu.TF.Operation)">
            <summary>
            Call once per control input to this Operation description
            </summary>
            <param name="input">The control input</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.ColocateWith(Emgu.TF.Operation)">
            <summary>
            Request this operation be co-located on the device where <paramref name="op"/>
            is placed.
            </summary>
            <param name="op">The other operation</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.DisposeObject">
            <summary>
            Release all the unmanaged data associated with this OperationDescription
            </summary>
        </member>
        <member name="T:Emgu.TF.Output">
            <summary>
            Represents a specific output of an operation.
            </summary>
        </member>
        <member name="F:Emgu.TF.Output.Operation">
            <summary>
            The Operation
            </summary>
        </member>
        <member name="F:Emgu.TF.Output.Index">
            <summary>
            The index of the input within the operation
            </summary>
        </member>
        <member name="M:Emgu.TF.Output.#ctor(Emgu.TF.Operation,System.Int32)">
            <summary>
            Create an output by specifying the operation and index.
            </summary>
            <param name="operation">The Operation</param>
            <param name="index">The index of the input within the operation</param>
        </member>
        <member name="P:Emgu.TF.Output.OutputType">
            <summary>
            Get the output type
            </summary>
        </member>
        <member name="P:Emgu.TF.Output.NumConsumers">
            <summary>
            Get the number of comsumers
            </summary>
        </member>
        <member name="P:Emgu.TF.Output.Consumers">
            <summary>
            Get the consumers for this Output
            </summary>
        </member>
        <member name="T:Emgu.TF.Session">
            <summary>
            API for driving Graph execution
            </summary>
        </member>
        <member name="M:Emgu.TF.Session.#ctor(Emgu.TF.Graph,Emgu.TF.SessionOptions,Emgu.TF.Status)">
            <summary>
            Return a new execution session with the associated graph.
            </summary>
            <param name="graph">Graph must be a valid graph (not deleted or null).  This function will
            prevent the graph from being deleted until Session is deleted.
            Does not take ownership of opts.
            </param>
            <param name="sessionOptions">The session options</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Session.Close(Emgu.TF.Status)">
            <summary>
            Close a session.
            Contacts any other processes associated with the session, if applicable.
            </summary>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Session.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this Session.
            </summary>
        </member>
        <member name="M:Emgu.TF.Session.Run(Emgu.TF.Output[],Emgu.TF.Tensor[],Emgu.TF.Output[],Emgu.TF.Operation[],Emgu.TF.Buffer,Emgu.TF.Buffer,Emgu.TF.Status)">
            <summary>
            Run the graph associated with the session starting with the supplied inputs
            (inputs[0,ninputs-1] with corresponding values in input_values[0,ninputs-1]).
            </summary>
            <param name="inputs">The input nodes</param>
            <param name="inputValues">The input values</param>
            <param name="outputs">The output nodes</param>
            <param name="targetOperations">Optional target operations</param>
            <param name="runOptions"></param>
            May be NULL, in which case it will be ignored; or
            non-NULL, in which case it must point to a `TF_Buffer` containing the
            serialized representation of a `RunOptions` protocol buffer.
            <param name="runMetadata">
            May be NULL, in which case it will be ignored; or
            non-NULL, in which case it must point to an empty, freshly allocated
            `TF_Buffer` that may be updated to contain the serialized representation
            of a `RunMetadata` protocol buffer.
            </param>
            <param name="status">The status</param>
            <returns>On success, the tensors corresponding to outputs[0,noutputs-1] are placed in the returned Tensors.</returns>
        </member>
        <member name="M:Emgu.TF.Session.ListDevices(Emgu.TF.Status)">
            <summary>
            Lists all devices in a session
            </summary>
            <param name="status">The status</param>
            <returns>All devices in the current session</returns>
        </member>
        <member name="T:Emgu.TF.Session.Device">
            <summary>
            The device for a session.
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.Name">
            <summary>
            The name of the device
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.Type">
            <summary>
            The type of the device
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.MemoryBytes">
            <summary>
            The amount of memory associated with a given device, in bytes.
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.MemoryGB">
            <summary>
            The amount of memory associated with a given device, in GB.
            </summary>
        </member>
        <member name="T:Emgu.TF.SessionOptions">
            <summary>
            Tensorflow session options
            </summary>
        </member>
        <member name="M:Emgu.TF.SessionOptions.#ctor">
            <summary>
            Construct a new session options
            </summary>
        </member>
        <member name="M:Emgu.TF.SessionOptions.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this session options.
            </summary>
        </member>
        <member name="M:Emgu.TF.SessionOptions.SetTarget(System.String)">
            <summary>
            Set the target in TF_SessionOptions.options.
            </summary>
            <param name="target">
            target can be empty, a single entry, or a comma separated list of entries.
            Each entry is in one of the following formats :
            "local"
            ip:port
            host:port
            </param>
        </member>
        <member name="M:Emgu.TF.SessionOptions.SetConfig(System.Byte[],Emgu.TF.Status)">
            <summary>
            Set the config in TF_SessionOptions.options.
            If config was not parsed successfully as a ConfigProto, record the
            error information in <paramref name="status"/>.
            </summary>
            <param name="proto">Config should be a serialized tensorflow.ConfigProto proto.</param>
            <param name="status">The status</param>
        </member>
        <member name="T:Emgu.TF.Status">
            <summary>
            The status
            </summary>
        </member>
        <member name="M:Emgu.TF.Status.#ctor">
            <summary>
            Create a new Status
            </summary>
        </member>
        <member name="M:Emgu.TF.Status.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this status
            </summary>
        </member>
        <member name="P:Emgu.TF.Status.Message">
            <summary>
            Get the message from the status
            </summary>
        </member>
        <member name="P:Emgu.TF.Status.StatusCode">
            <summary>
            Get the status code
            </summary>
        </member>
        <member name="P:Emgu.TF.Status.Ptr">
            <summary>
            Get the pointer to the native status
            </summary>
        </member>
        <member name="T:Emgu.TF.Status.Code">
            <summary>
            The status code
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Ok">
            <summary>
            Ok
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Cancelled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.InvalidArgument">
            <summary>
            Invalid argument
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.DeadlineExceeded">
            <summary>
            Deadline exceed
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.NotFound">
            <summary>
            Not found
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.AlreadyExists">
            <summary>
            Already exists
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.PermissionDenied">
            <summary>
            Permission denied
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unauthenticated">
            <summary>
            Unauthenticated
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.ResourceExhausted">
            <summary>
            Resource exhausted
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.FailedPrecondition">
            <summary>
            Failed precondition
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Aborted">
            <summary>
            Aborted
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.OutOfRange">
            <summary>
            Out of range
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unimplemented">
            <summary>
            Unimplemented
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Internal">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unavailable">
            <summary>
            Unavailable
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.DataLoss">
            <summary>
            Data loss
            </summary>
        </member>
        <member name="T:Emgu.TF.StatusChecker">
            <summary>
            A status checker, during the disposal, it will throw exception if the status is not ok.
            </summary>
        </member>
        <member name="M:Emgu.TF.StatusChecker.#ctor(Emgu.TF.Status)">
            <summary>
            Create a status checker
            </summary>
            <param name="status">The status to be check, if null, one will be created</param>
        </member>
        <member name="M:Emgu.TF.StatusChecker.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this StatusChecker.
            </summary>
        </member>
        <member name="P:Emgu.TF.StatusChecker.Status">
            <summary>
            Get the status that this status checker is monitoring
            </summary>
        </member>
        <member name="T:Emgu.TF.DataType">
            <summary>
            The tensor flow datatype.
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Float">
            <summary>
            Float
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int32">
            <summary>
            Int32 tensors are always in 'host' memory.
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint8">
            <summary>
            Uint8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int16">
            <summary>
            Int16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int8">
            <summary>
            Int8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Complex64">
            <summary>
            Single-precision complex
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Complex">
            <summary>
            Old identifier kept for API backwards compatibility
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int64">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Bool">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Qint8">
            <summary>
            Quantized int8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Quint8">
            <summary>
            Quantized uint8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Qint32">
            <summary>
            Quantized int32
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Bfloat16">
            <summary>
            Float32 truncated to 16 bits.  Only for cast ops.
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Qint16">
            <summary>
            Quantized int16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Quint16">
            <summary>
            Quantized uint16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint16">
            <summary>
            Uint16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Complex128">
            <summary>
            Double-precision complex
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Half">
            <summary>
            Half
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Resource">
            <summary>
            Resource
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Variant">
            <summary>
            Variant
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint32">
            <summary>
            Uint32
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint64">
            <summary>
            Uint64
            </summary>
        </member>
        <member name="T:Emgu.TF.Tensor">
             <summary>
             Tensor holds a multi-dimensional array of elements of a single data type.
             For all types other than STRING, the data buffer stores elements
             in row major order.  E.g. if data is treated as a vector of TF_DataType:
            
               element 0:   index (0, ..., 0)
               element 1:   index (0, ..., 1)
               ...
            
             The format for TF_STRING tensors is:
               start_offset: array[uint64]
               data:         byte[...]
            
               The string length (as a varint), followed by the contents of the string
               is encoded at data[start_offset[i]]]. StringEncode and StringDecode
               facilitate this encoding.
             </summary>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(Emgu.TF.DataType,System.Int32)">
            <summary>
            Create a single element tensor
            </summary>
            <param name="dataType">The Type of the Tensor</param>
            <param name="sizeInBytes">The size in bytes</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(Emgu.TF.DataType,System.Int32[])">
            <summary>
            Allocate a new tensor. The caller must set the Tensor values by writing them to the DataPointer
            with length ByteSize.
            </summary>
            <param name="dataType">The type of data</param>
            <param name="dims">The size for each of the dimension of the tensor</param>
        </member>
        <member name="M:Emgu.TF.Tensor.FromString(System.Byte[],Emgu.TF.Status)">
            <summary>
            Convert a byte array to a Tensor
            </summary>
            <param name="value">The byte array</param>
            <param name="status">Optional status</param>
            <returns>The tensor</returns>
        </member>
        <member name="M:Emgu.TF.Tensor.DecodeString(Emgu.TF.Status)">
            <summary>
            Decode a string encoded
            </summary>
            <param name="status">The status</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int16)">
            <summary>
            Create a Tensor that consist of a single int16 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int32)">
            <summary>
            Create a Tensor that consist of a single int value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int64)">
            <summary>
            Create a Tensor that consist of a single int64 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Single)">
            <summary>
            Create a Tensor that consist of a single float value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Double)">
            <summary>
            Create a Tensor that consist of a single float value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int32[])">
            <summary>
            Create a Tensor that consist of an array of int value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Single[])">
            <summary>
            Create a Tensor that consist of an array of float value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Double[])">
            <summary>
            Create a Tensor that consist of an array of double value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.UInt16[])">
            <summary>
            Create a Tensor that consist of an array of UInt16 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.UInt32[])">
            <summary>
            Create a Tensor that consist of an array of UInt32 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.UInt64[])">
            <summary>
            Create a Tensor that consist of an array of UInt64 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this tensor
            </summary>
        </member>
        <member name="M:Emgu.TF.Tensor.Flat``1">
            <summary>
            Get the tensor data as a flatten single dimension array
            </summary>
            <typeparam name="T">The type of the data array</typeparam>
            <returns>The tensor data as a flatten single dimension array</returns>
        </member>
        <member name="M:Emgu.TF.Tensor.GetData(System.Boolean)">
            <summary>
            Get a copy of the tensor data as a managed array
            </summary>
            <param name="jagged">If true, return a jagged array, otherwise, a flatten single dimension array</param>
            <returns>A copy of the tensor data as a managed array</returns>
        </member>
        <member name="P:Emgu.TF.Tensor.DataPointer">
            <summary>
            Get the native pointer to the tensor data
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.ByteSize">
            <summary>
            Return the size of the underlying data in bytes.
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.Dim">
            <summary>
            Return the dimension of the tensor
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.JaggedData">
            <summary>
            Get the tensor data as a jagged array
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.Data">
            <summary>
            Get the tensor data as a managed array
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.Type">
            <summary>
            Get the type of data from this tensor
            </summary>
        </member>
    </members>
</doc>
